{
  "name": "nextjs-custom-template",
  "type": "registry:block",
  "dependencies": [
    "@clerk/nextjs",
    "@hookform/resolvers",
    "@radix-ui/react-avatar",
    "@radix-ui/react-collapsible",
    "@radix-ui/react-dialog",
    "@radix-ui/react-dropdown-menu",
    "@radix-ui/react-hover-card",
    "@radix-ui/react-icons",
    "@radix-ui/react-navigation-menu",
    "@radix-ui/react-select",
    "@radix-ui/react-slot",
    "@radix-ui/react-toast",
    "@react-three/drei",
    "@react-three/fiber",
    "class-variance-authority",
    "clsx",
    "framer-motion",
    "lucide-react",
    "mongodb",
    "next-themes",
    "nodemailer",
    "qss",
    "react-hook-form",
    "sonner",
    "tailwind-merge",
    "tailwindcss-animate",
    "three",
    "vaul",
    "zod"
  ],
  "devDependencies": [
    "@types/nodemailer"
  ],
  "registryDependencies": [],
  "files": [
    {
      "path": "./.dockerignore",
      "content": "Dockerfile\r\n.dockerignore\r\nnode_modules\r\nnpm-debug.log\r\nREADME.md\r\n.next\r\ndocker\r\n.git",
      "type": "registry:example",
      "target": "~/.dockerignore"
    },
    {
      "path": "./.env.example",
      "content": "NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=\nCLERK_SECRET_KEY=\nNEXT_PUBLIC_CLERK_SIGN_IN_URL=/sign-in\nNEXT_PUBLIC_CLERK_SIGN_UP_URL=/sign-up\nMONGODB_URI=\nEMAIL_USER=\nEMAIL_PASS=",
      "type": "registry:example",
      "target": "~/.env.example"
    },
    {
      "path": "./.vscode\\settings.json",
      "content": "{\r\n    \"pieces.cloudCapabilities\": \"Blended\",\r\n    \"pieces.telemetry\": true\r\n}",
      "type": "registry:example",
      "target": "~/.vscode\\settings.json"
    },
    {
      "path": "./app\\(auth)\\sign-in\\[[...sign-in]]\\page.tsx",
      "content": "import React from \"react\";\r\nimport { SignIn } from \"@clerk/nextjs\";\r\nimport { Card } from \"@/components/ui/card\";\r\n\r\nconst SignInPage = () => {\r\n  return (\r\n    <div className=\"h-[48rem] flex items-center justify-center\">\r\n      <Card className=\"w-full max-w-md bg-white/80 backdrop-blur-md shadow-xl z-10 p-8 rounded-2xl\">\r\n        <h1 className=\"text-3xl font-bold text-center mb-6 text-gray-800\">\r\n          Join Our Community\r\n        </h1>\r\n        <SignIn\r\n          appearance={{\r\n            elements: {\r\n              rootBox: \"w-full\",\r\n              card: \"w-full shadow-none bg-transparent\",\r\n              header: \"hidden\",\r\n              formButtonPrimary:\r\n                \"w-full bg-gradient-to-r from-purple-600 to-pink-600 text-white rounded-md px-4 py-2 hover:from-purple-700 hover:to-pink-700 focus:outline-none focus:ring-2 focus:ring-purple-600 focus:ring-opacity-50 transition-all duration-200\",\r\n              formFieldInput:\r\n                \"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-600 focus:border-transparent transition-all duration-200\",\r\n              formFieldLabel: \"text-sm font-medium text-gray-700\",\r\n              identityPreviewText: \"text-sm text-gray-600\",\r\n              identityPreviewEditButton:\r\n                \"text-purple-600 hover:text-purple-700\",\r\n              formResendCodeLink: \"text-purple-600 hover:text-purple-700\",\r\n            },\r\n          }}\r\n        />\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignInPage;\r\n",
      "type": "registry:example",
      "target": "~/app\\(auth)\\sign-in\\[[...sign-in]]\\page.tsx"
    },
    {
      "path": "./app\\(auth)\\sign-up\\[[...sign-up]]\\page.tsx",
      "content": "import React from \"react\";\r\nimport { SignUp } from \"@clerk/nextjs\";\r\nimport { Card } from \"@/components/ui/card\";\r\n\r\nconst SignUpPage = () => {\r\n  return (\r\n    <div className=\"h-[48rem] flex items-center justify-center\">\r\n      <Card className=\"w-full max-w-md bg-white/80 backdrop-blur-md shadow-xl z-10 p-8 rounded-2xl\">\r\n        <h1 className=\"text-3xl font-bold text-center mb-6 text-gray-800\">\r\n          Join Our Community\r\n        </h1>\r\n        <SignUp\r\n          appearance={{\r\n            elements: {\r\n              rootBox: \"w-full\",\r\n              card: \"w-full shadow-none bg-transparent\",\r\n              header: \"hidden\",\r\n              formButtonPrimary:\r\n                \"w-full bg-gradient-to-r from-purple-600 to-pink-600 text-white rounded-md px-4 py-2 hover:from-purple-700 hover:to-pink-700 focus:outline-none focus:ring-2 focus:ring-purple-600 focus:ring-opacity-50 transition-all duration-200\",\r\n              formFieldInput:\r\n                \"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-purple-600 focus:border-transparent transition-all duration-200\",\r\n              formFieldLabel: \"text-sm font-medium text-gray-700\",\r\n              identityPreviewText: \"text-sm text-gray-600\",\r\n              identityPreviewEditButton:\r\n                \"text-purple-600 hover:text-purple-700\",\r\n              formResendCodeLink: \"text-purple-600 hover:text-purple-700\",\r\n            },\r\n          }}\r\n        />\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignUpPage;\r\n",
      "type": "registry:example",
      "target": "~/app\\(auth)\\sign-up\\[[...sign-up]]\\page.tsx"
    },
    {
      "path": "./app\\about\\page.tsx",
      "content": "\"use client\";\r\n\r\nimport React, { useState } from \"react\";\r\nimport { motion, AnimatePresence } from \"framer-motion\";\r\nimport { Card, CardContent } from \"@/components/ui/card\";\r\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  ChevronDown,\r\n  ChevronUp,\r\n  Code,\r\n  Palette,\r\n  Lightbulb,\r\n  Rocket,\r\n} from \"lucide-react\";\r\n\r\ninterface TeamMember {\r\n  name: string;\r\n  role: string;\r\n  avatar: string;\r\n  bio: string;\r\n  skills: string[];\r\n}\r\n\r\nconst teamMembers: TeamMember[] = [\r\n  {\r\n    name: \"Prathamesh Chougale\",\r\n    role: \"Full Stack Developer\",\r\n    avatar: \"/api/placeholder/100/100\",\r\n    bio: \"Passionate about creating scalable and efficient web solutions.\",\r\n    skills: [\"React\", \"Node.js\", \"GraphQL\", \"AWS\"],\r\n  },\r\n  {\r\n    name: \"Samantha Lee\",\r\n    role: \"UX/UI Designer\",\r\n    avatar: \"/api/placeholder/100/100\",\r\n    bio: \"Dedicated to crafting intuitive and delightful user experiences.\",\r\n    skills: [\"Figma\", \"Adobe XD\", \"User Research\", \"Prototyping\"],\r\n  },\r\n  {\r\n    name: \"Raj Patel\",\r\n    role: \"AI Specialist\",\r\n    avatar: \"/api/placeholder/100/100\",\r\n    bio: \"Exploring the frontiers of artificial intelligence and machine learning.\",\r\n    skills: [\"TensorFlow\", \"PyTorch\", \"NLP\", \"Computer Vision\"],\r\n  },\r\n  {\r\n    name: \"Elena Rodriguez\",\r\n    role: \"Product Manager\",\r\n    avatar: \"/api/placeholder/100/100\",\r\n    bio: \"Bridging the gap between user needs and technical possibilities.\",\r\n    skills: [\"Agile\", \"User Stories\", \"Roadmapping\", \"Data Analysis\"],\r\n  },\r\n];\r\n\r\nconst AboutPage: React.FC = () => {\r\n  const [activeSection, setActiveSection] = useState<string | null>(null);\r\n\r\n  const containerVariants = {\r\n    hidden: { opacity: 0 },\r\n    visible: {\r\n      opacity: 1,\r\n      transition: {\r\n        staggerChildren: 0.2,\r\n      },\r\n    },\r\n  };\r\n\r\n  const itemVariants = {\r\n    hidden: { y: 20, opacity: 0 },\r\n    visible: {\r\n      y: 0,\r\n      opacity: 1,\r\n      transition: {\r\n        type: \"spring\",\r\n        stiffness: 100,\r\n      },\r\n    },\r\n  };\r\n\r\n  const sectionVariants = {\r\n    hidden: { height: 0, opacity: 0 },\r\n    visible: { height: \"auto\", opacity: 1, transition: { duration: 0.5 } },\r\n  };\r\n\r\n  const floatingIconVariants = {\r\n    hidden: { y: 0 },\r\n    visible: {\r\n      y: [-10, 10, -10],\r\n      transition: { repeat: Infinity, duration: 3 },\r\n    },\r\n  };\r\n\r\n  const Section: React.FC<{\r\n    title: string;\r\n    icon: React.ReactNode;\r\n    children: React.ReactNode;\r\n  }> = ({ title, icon, children }) => (\r\n    <motion.div variants={itemVariants} className=\"mb-8\">\r\n      <Button\r\n        variant=\"outline\"\r\n        className=\"w-full justify-between text-lg font-semibold py-4\"\r\n        onClick={() => setActiveSection(activeSection === title ? null : title)}\r\n      >\r\n        <span className=\"flex items-center\">\r\n          {icon}\r\n          <span className=\"ml-2\">{title}</span>\r\n        </span>\r\n        {activeSection === title ? (\r\n          <ChevronUp size={24} />\r\n        ) : (\r\n          <ChevronDown size={24} />\r\n        )}\r\n      </Button>\r\n      <AnimatePresence>\r\n        {activeSection === title && (\r\n          <motion.div\r\n            variants={sectionVariants}\r\n            initial=\"hidden\"\r\n            animate=\"visible\"\r\n            exit=\"hidden\"\r\n            className=\"mt-4 bg-secondary p-6 rounded-lg\"\r\n          >\r\n            {children}\r\n          </motion.div>\r\n        )}\r\n      </AnimatePresence>\r\n    </motion.div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"container mx-auto px-4 py-16 relative overflow-hidden\">\r\n      <motion.div\r\n        className=\"absolute inset-0 -z-10 opacity-10\"\r\n        animate={{\r\n          backgroundImage: [\r\n            \"radial-gradient(circle at 20% 20%, #ff6b6b 0%, transparent 50%)\",\r\n            \"radial-gradient(circle at 80% 80%, #4ecdc4 0%, transparent 50%)\",\r\n            \"radial-gradient(circle at 50% 50%, #45b7d1 0%, transparent 50%)\",\r\n            \"radial-gradient(circle at 20% 20%, #ff6b6b 0%, transparent 50%)\",\r\n          ],\r\n        }}\r\n        transition={{ repeat: Infinity, duration: 20 }}\r\n      />\r\n\r\n      <motion.div\r\n        className=\"relative\"\r\n        initial=\"hidden\"\r\n        animate=\"visible\"\r\n        variants={containerVariants}\r\n      >\r\n        <motion.h1\r\n          variants={itemVariants}\r\n          className=\"text-6xl font-bold mb-8 text-center bg-clip-text text-transparent bg-gradient-to-r from-primary to-secondary\"\r\n        >\r\n          Innovate. Create. Inspire.\r\n        </motion.h1>\r\n\r\n        <motion.p\r\n          variants={itemVariants}\r\n          className=\"text-xl text-center mb-16 max-w-2xl mx-auto\"\r\n        >\r\n          We are a team of visionaries, innovators, and problem-solvers\r\n          dedicated to shaping the future of technology.\r\n        </motion.p>\r\n\r\n        <Section\r\n          title=\"Our Expertise\"\r\n          icon={<Code size={24} className=\"text-primary\" />}\r\n        >\r\n          <p className=\"mb-4\">\r\n            With a diverse skill set spanning full-stack development, AI, and UX\r\n            design, we tackle complex challenges with creativity and precision.\r\n            Our expertise in cutting-edge technologies allows us to build\r\n            scalable, efficient, and user-friendly solutions that drive business\r\n            growth.\r\n          </p>\r\n        </Section>\r\n\r\n        <Section\r\n          title=\"Our Approach\"\r\n          icon={<Palette size={24} className=\"text-primary\" />}\r\n        >\r\n          <p className=\"mb-4\">\r\n            We believe in a collaborative, iterative approach that puts user\r\n            needs at the forefront. By combining agile methodologies with design\r\n            thinking, we ensure that our solutions not only meet technical\r\n            requirements but also delight users and exceed expectations.\r\n          </p>\r\n        </Section>\r\n\r\n        <Section\r\n          title=\"Our Vision\"\r\n          icon={<Lightbulb size={24} className=\"text-primary\" />}\r\n        >\r\n          <p className=\"mb-4\">\r\n            We envision a world where technology empowers individuals and\r\n            businesses to reach their full potential. Our mission is to be at\r\n            the forefront of this transformation, creating innovative solutions\r\n            that make a lasting positive impact on society and the environment.\r\n          </p>\r\n        </Section>\r\n\r\n        <motion.h2\r\n          variants={itemVariants}\r\n          className=\"text-4xl font-bold mb-8 text-center mt-16\"\r\n        >\r\n          Meet Our Team\r\n        </motion.h2>\r\n\r\n        <motion.div\r\n          variants={itemVariants}\r\n          className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8\"\r\n        >\r\n          {teamMembers.map((member, index) => (\r\n            <motion.div\r\n              key={index}\r\n              whileHover={{ scale: 1.05 }}\r\n              whileTap={{ scale: 0.95 }}\r\n            >\r\n              <Card className=\"overflow-hidden h-full\">\r\n                <CardContent className=\"p-6 flex flex-col h-full\">\r\n                  <motion.div\r\n                    className=\"mb-4 relative\"\r\n                    whileHover={{ rotate: [0, -10, 10, -10, 0] }}\r\n                    transition={{ duration: 0.5 }}\r\n                  >\r\n                    <Avatar className=\"w-24 h-24 mx-auto\">\r\n                      <AvatarImage src={member.avatar} alt={member.name} />\r\n                      <AvatarFallback>\r\n                        {member.name\r\n                          .split(\" \")\r\n                          .map((n) => n[0])\r\n                          .join(\"\")}\r\n                      </AvatarFallback>\r\n                    </Avatar>\r\n                    <motion.div\r\n                      className=\"absolute -top-2 -right-2 bg-primary text-white dark:text-black rounded-full p-2\"\r\n                      variants={floatingIconVariants}\r\n                    >\r\n                      <Rocket size={16} />\r\n                    </motion.div>\r\n                  </motion.div>\r\n                  <h3 className=\"text-xl font-semibold mb-1 text-center\">\r\n                    {member.name}\r\n                  </h3>\r\n                  <p className=\"text-sm text-gray-500 mb-4 text-center\">\r\n                    {member.role}\r\n                  </p>\r\n                  <p className=\"text-sm mb-4 flex-grow\">{member.bio}</p>\r\n                  <div className=\"flex flex-wrap gap-2 justify-center\">\r\n                    {member.skills.map((skill, skillIndex) => (\r\n                      <span\r\n                        key={skillIndex}\r\n                        className=\"bg-secondary text-secondary-foreground text-xs px-2 py-1 rounded-full\"\r\n                      >\r\n                        {skill}\r\n                      </span>\r\n                    ))}\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n            </motion.div>\r\n          ))}\r\n        </motion.div>\r\n      </motion.div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AboutPage;\r\n",
      "type": "registry:example",
      "target": "~/app\\about\\page.tsx"
    },
    {
      "path": "./app\\api\\contact\\route.ts",
      "content": "// app/api/send-email/route.ts\r\n\r\nimport {  currentUser } from '@clerk/nextjs/server'\r\nimport { NextResponse } from 'next/server';\r\nimport nodemailer from 'nodemailer';\r\n\r\nexport async function POST(request: Request) {\r\n  try {\r\n    const { subject, name, message } = await request.json();\r\n    const adminEmail = process.env.EMAIL_USER;\r\n    const user = await currentUser();\r\n    if(!user || !user.primaryEmailAddress) {\r\n        return NextResponse.json({ message: 'User not found' }, { status: 404 });\r\n    }\r\n    const useremail = user.primaryEmailAddress?.emailAddress;\r\n    // Create a transporter object using SMTP transport\r\n    const transporter = nodemailer.createTransport({\r\n      host: 'smtp.gmail.com', // Replace with your SMTP server host\r\n      port: 587, // Replace with your SMTP server port\r\n      secure: false, // Use true for port 465, false for other ports\r\n      auth: {\r\n        user: process.env.EMAIL_USER, // Your email user\r\n        pass: process.env.EMAIL_PASS, // Your email password\r\n      },\r\n    });\r\n\r\n    // Setup email data\r\n    const mailOptions = {\r\n      from: adminEmail, // Sender address\r\n      to: useremail, // List of recipients\r\n      subject: \"Thank you reaching our Site\", // Subject line\r\n      html: getUserEmailTemplate(name), // HTML body\r\n    };\r\n\r\n    const mailOptionsAdmin = {\r\n        from: useremail, // Sender address\r\n        to: adminEmail, // List of recipients\r\n        subject: subject, // Subject line\r\n        html: getCompanyEmailTemplate(name, useremail, message), // HTML body\r\n        };\r\n\r\n\r\n    // Send mail\r\n    await transporter.sendMail(mailOptions);\r\n    await transporter.sendMail(mailOptionsAdmin);\r\n\r\n    return NextResponse.json({ message: 'Email sent successfully' }, { status: 200 });\r\n  } catch (error) {\r\n    console.error('Error sending email:', error);\r\n    return NextResponse.json({ message: 'Failed to send email' }, { status: 500 });\r\n  }\r\n}\r\n\r\nfunction getUserEmailTemplate(name: string): string {\r\n    return `\r\n      <!DOCTYPE html>\r\n      <html>\r\n        <head>\r\n          <style>\r\n            body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\r\n            .container { max-width: 600px; margin: 0 auto; padding: 20px; }\r\n            .header { background-color: #4299E1; color: white; padding: 20px; text-align: center; }\r\n            .content { padding: 20px; background-color: #f8f8f8; }\r\n            .footer { text-align: center; margin-top: 20px; font-size: 0.8em; color: #666; }\r\n          </style>\r\n        </head>\r\n        <body>\r\n          <div class=\"container\">\r\n            <div class=\"header\">\r\n              <h1>Thank You for Contacting {company name}</h1>\r\n            </div>\r\n            <div class=\"content\">\r\n              <p>Dear ${name},</p>\r\n              <p>Thank you for reaching out to {company name}. We have received your message and appreciate your interest in our services.</p>\r\n              <p>Our team will review your inquiry and get back to you as soon as possible, usually within 1-2 business days.</p>\r\n              <p>In the meantime, feel free to explore our website for more information about our services and available chefs.</p>\r\n              <p>Best regards,<br>The {company name} Team</p>\r\n            </div>\r\n            <div class=\"footer\">\r\n              <p>&copy; 2024 {company name}. All rights reserved.</p>\r\n            </div>\r\n          </div>\r\n        </body>\r\n      </html>\r\n    `;\r\n  }\r\n  \r\n  function getCompanyEmailTemplate(name: string, email: string, message: string): string {\r\n    return `\r\n      <!DOCTYPE html>\r\n      <html>\r\n        <head>\r\n          <style>\r\n            body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }\r\n            .container { max-width: 600px; margin: 0 auto; padding: 20px; }\r\n            .header { background-color: #4299E1; color: white; padding: 20px; text-align: center; }\r\n            .content { padding: 20px; background-color: #f8f8f8; }\r\n            .footer { text-align: center; margin-top: 20px; font-size: 0.8em; color: #666; }\r\n          </style>\r\n        </head>\r\n        <body>\r\n          <div class=\"container\">\r\n            <div class=\"header\">\r\n              <h1>New Contact Form Submission</h1>\r\n            </div>\r\n            <div class=\"content\">\r\n              <p><strong>Name:</strong> ${name}</p>\r\n              <p><strong>Email:</strong> ${email}</p>\r\n              <p><strong>Message:</strong></p>\r\n              <p>${message}</p>\r\n            </div>\r\n            <div class=\"footer\">\r\n              <p>&copy; 2024 {company name}. All rights reserved.</p>\r\n            </div>\r\n          </div>\r\n        </body>\r\n      </html>\r\n    `;\r\n  }",
      "type": "registry:example",
      "target": "~/app\\api\\contact\\route.ts"
    },
    {
      "path": "./app\\contact\\page.tsx",
      "content": "\"use client\";\r\n\r\nimport React, { useState } from \"react\";\r\nimport { motion, AnimatePresence } from \"framer-motion\";\r\nimport { Card, CardContent } from \"@/components/ui/card\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { zodResolver } from \"@hookform/resolvers/zod\";\r\nimport { z } from \"zod\";\r\nimport { Mail, User, MessageSquare, Send } from \"lucide-react\";\r\nimport ContactPageAnimation from \"@/components/svg/contactsvg\";\r\nimport { useToast } from \"@/hooks/use-toast\";\r\n\r\nconst contactFormSchema = z.object({\r\n  name: z.string().min(2, { message: \"Name must be at least 2 characters\" }),\r\n  subject: z\r\n    .string()\r\n    .min(3, { message: \"Subject must be at least 3 characters\" }),\r\n  message: z\r\n    .string()\r\n    .min(10, { message: \"Message must be at least 10 characters\" }),\r\n});\r\n\r\ntype ContactFormData = z.infer<typeof contactFormSchema>;\r\n\r\nconst ContactPage: React.FC = () => {\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [isSubmitted, setIsSubmitted] = useState(false);\r\n  const { toast } = useToast();\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n    reset,\r\n  } = useForm<ContactFormData>({\r\n    resolver: zodResolver(contactFormSchema),\r\n  });\r\n\r\n  const onSubmit = async (data: ContactFormData) => {\r\n    try {\r\n      setIsSubmitting(true);\r\n      await fetch(\"/api/contact\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(data),\r\n      });\r\n      setIsSubmitted(true);\r\n      toast({\r\n        title: \"Message Sent!\",\r\n        description: \"We'll get back to you soon.\",\r\n      });\r\n      reset();\r\n    } catch (error) {\r\n      console.error(error);\r\n      toast({\r\n        variant: \"destructive\",\r\n        title: \"Failed to send message\",\r\n        description: \"Please try again later.\",\r\n      });\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  // const svgVariants = {\r\n  //   hidden: { opacity: 0, pathLength: 0 },\r\n  //   visible: {\r\n  //     opacity: 1,\r\n  //     pathLength: 1,\r\n  //     transition: { duration: 2, ease: \"easeInOut\" },\r\n  //   },\r\n  // };\r\n\r\n  return (\r\n    <div className=\"min-h-screen w-full flex items-center justify-center p-4 overflow-hidden\">\r\n      <div className=\"max-w-7xl w-full flex flex-col lg:flex-row items-center justify-between\">\r\n        <motion.div\r\n          className=\"lg:w-1/2 mb-8 lg:mb-0\"\r\n          initial={{ opacity: 0, x: -100 }}\r\n          animate={{ opacity: 1, x: 0 }}\r\n          transition={{ duration: 0.8 }}\r\n        >\r\n          <h1 className=\"text-5xl lg:text-7xl font-bold mb-6 leading-tight\">\r\n            Let&apos;s Connect <br /> and Create\r\n          </h1>\r\n          <p className=\"text-xl text-black/80 dark:text-white/80 mb-8\">\r\n            Reach out and let&apos;s turn your ideas into reality.\r\n          </p>\r\n          <ContactPageAnimation />\r\n        </motion.div>\r\n\r\n        <motion.div\r\n          className=\"lg:w-1/2\"\r\n          initial={{ opacity: 0, x: 100 }}\r\n          animate={{ opacity: 1, x: 0 }}\r\n          transition={{ duration: 0.8, delay: 0.2 }}\r\n        >\r\n          <Card className=\"bg-white/10 backdrop-blur-lg shadow-xl w-full max-w-md mx-auto\">\r\n            <CardContent className=\"p-6\">\r\n              <AnimatePresence mode=\"wait\">\r\n                {isSubmitted ? (\r\n                  <motion.div\r\n                    key=\"success\"\r\n                    initial={{ opacity: 0, y: 50 }}\r\n                    animate={{ opacity: 1, y: 0 }}\r\n                    exit={{ opacity: 0, y: -50 }}\r\n                    className=\"text-center py-8\"\r\n                  >\r\n                    <motion.div\r\n                      initial={{ scale: 0 }}\r\n                      animate={{ scale: 1 }}\r\n                      transition={{\r\n                        type: \"spring\",\r\n                        stiffness: 500,\r\n                        damping: 30,\r\n                      }}\r\n                      className=\"w-16 h-16 bg-green-500 rounded-full flex items-center justify-center mx-auto mb-4\"\r\n                    >\r\n                      <Send size={24} />\r\n                    </motion.div>\r\n                    <h2 className=\"text-2xl font-bold mb-2\">Message Sent!</h2>\r\n                    <p className=\"text-white/80\">\r\n                      We&apos;ll get back to you soon.\r\n                    </p>\r\n                  </motion.div>\r\n                ) : (\r\n                  <motion.form\r\n                    key=\"form\"\r\n                    onSubmit={handleSubmit(onSubmit)}\r\n                    className=\"space-y-6\"\r\n                    initial={{ opacity: 0 }}\r\n                    animate={{ opacity: 1 }}\r\n                    exit={{ opacity: 0 }}\r\n                  >\r\n                    <div>\r\n                      <label\r\n                        htmlFor=\"name\"\r\n                        className=\"block text-sm font-medium mb-1\"\r\n                      >\r\n                        Name\r\n                      </label>\r\n                      <div className=\"relative\">\r\n                        <User\r\n                          className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-black/50 dark:text-white/50\"\r\n                          size={18}\r\n                        />\r\n                        <Input\r\n                          id=\"name\"\r\n                          {...register(\"name\")}\r\n                          className=\"bg-white/20 placeholder-white/50 pl-10 focus:ring-2 focus:ring-purple-500 transition-all duration-300\"\r\n                          placeholder=\"Your name\"\r\n                        />\r\n                      </div>\r\n                      {errors.name && (\r\n                        <motion.p\r\n                          initial={{ opacity: 0, y: -10 }}\r\n                          animate={{ opacity: 1, y: 0 }}\r\n                          className=\"text-red-300 text-sm mt-1\"\r\n                        >\r\n                          {errors.name.message}\r\n                        </motion.p>\r\n                      )}\r\n                    </div>\r\n                    <div>\r\n                      <label\r\n                        htmlFor=\"subject\"\r\n                        className=\"block text-sm font-medium mb-1\"\r\n                      >\r\n                        Subject\r\n                      </label>\r\n                      <div className=\"relative\">\r\n                        <Mail\r\n                          className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-black/50 dark:text-white/50\"\r\n                          size={18}\r\n                        />\r\n                        <Input\r\n                          id=\"subject\"\r\n                          type=\"subject\"\r\n                          {...register(\"subject\")}\r\n                          className=\"bg-white/20 placeholder-white/50 pl-10 focus:ring-2 focus:ring-purple-500 transition-all duration-300\"\r\n                          placeholder=\"your@subject.com\"\r\n                        />\r\n                      </div>\r\n                      {errors.subject && (\r\n                        <motion.p\r\n                          initial={{ opacity: 0, y: -10 }}\r\n                          animate={{ opacity: 1, y: 0 }}\r\n                          className=\"text-red-300 text-sm mt-1\"\r\n                        >\r\n                          {errors.subject.message}\r\n                        </motion.p>\r\n                      )}\r\n                    </div>\r\n                    <div>\r\n                      <label\r\n                        htmlFor=\"message\"\r\n                        className=\"block text-sm font-medium mb-1\"\r\n                      >\r\n                        Message\r\n                      </label>\r\n                      <div className=\"relative\">\r\n                        <MessageSquare\r\n                          className=\"absolute left-3 top-3 text-black/50 dark:text-white/50\"\r\n                          size={18}\r\n                        />\r\n                        <Textarea\r\n                          id=\"message\"\r\n                          {...register(\"message\")}\r\n                          className=\"bg-white/20 placeholder-white/50 pl-10 focus:ring-2 focus:ring-purple-500 transition-all duration-300\"\r\n                          placeholder=\"Your message\"\r\n                          rows={4}\r\n                        />\r\n                      </div>\r\n                      {errors.message && (\r\n                        <motion.p\r\n                          initial={{ opacity: 0, y: -10 }}\r\n                          animate={{ opacity: 1, y: 0 }}\r\n                          className=\"text-red-300 text-sm mt-1\"\r\n                        >\r\n                          {errors.message.message}\r\n                        </motion.p>\r\n                      )}\r\n                    </div>\r\n                    <motion.div\r\n                      whileHover={{ scale: 1.05 }}\r\n                      whileTap={{ scale: 0.95 }}\r\n                    >\r\n                      <Button\r\n                        type=\"submit\"\r\n                        disabled={isSubmitting}\r\n                        className=\"w-full bg-gradient-to-r from-pink-500 to-purple-500 hover:from-pink-600 hover:to-purple-600 text-white font-semibold py-2 px-4 rounded-md transition duration-300 ease-in-out\"\r\n                      >\r\n                        {isSubmitting ? \"Sending...\" : \"Send Message\"}\r\n                      </Button>\r\n                    </motion.div>\r\n                  </motion.form>\r\n                )}\r\n              </AnimatePresence>\r\n            </CardContent>\r\n          </Card>\r\n        </motion.div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContactPage;\r\n",
      "type": "registry:example",
      "target": "~/app\\contact\\page.tsx"
    },
    {
      "path": "./app\\globals.css",
      "content": "@tailwind base;\r\n@tailwind components;\r\n@tailwind utilities;\r\n\r\n:root::-webkit-scrollbar {\r\n  display: none;\r\n}\r\n\r\n:root {\r\n  --foreground-rgb: 0, 0, 0;\r\n  --background-start-rgb: 214, 219, 220;\r\n  --background-end-rgb: 255, 255, 255;\r\n  -ms-overflow-style: none;  /* IE and Edge */\r\n  scrollbar-width: none;  /* Firefox */\r\n  user-select: none;\r\n}\r\n\r\n@media (prefers-color-scheme: dark) {\r\n  :root {\r\n    --foreground-rgb: 255, 255, 255;\r\n    --background-start-rgb: 0, 0, 0;\r\n    --background-end-rgb: 0, 0, 0;\r\n  }\r\n}\r\n\r\n@layer utilities {\r\n  .text-balance {\r\n    text-wrap: balance;\r\n  }\r\n}\r\n\r\n@layer base {\r\n  :root {\r\n    --background: 0 0% 100%;\r\n    --foreground: 0 0% 3.9%;\r\n    --card: 0 0% 100%;\r\n    --card-foreground: 0 0% 3.9%;\r\n    --popover: 0 0% 100%;\r\n    --popover-foreground: 0 0% 3.9%;\r\n    --primary: 0 0% 9%;\r\n    --primary-foreground: 0 0% 98%;\r\n    --secondary: 0 0% 96.1%;\r\n    --secondary-foreground: 0 0% 9%;\r\n    --muted: 0 0% 96.1%;\r\n    --muted-foreground: 0 0% 45.1%;\r\n    --accent: 0 0% 96.1%;\r\n    --accent-foreground: 0 0% 9%;\r\n    --destructive: 0 84.2% 60.2%;\r\n    --destructive-foreground: 0 0% 98%;\r\n    --border: 0 0% 89.8%;\r\n    --input: 0 0% 89.8%;\r\n    --ring: 0 0% 3.9%;\r\n    --chart-1: 12 76% 61%;\r\n    --chart-2: 173 58% 39%;\r\n    --chart-3: 197 37% 24%;\r\n    --chart-4: 43 74% 66%;\r\n    --chart-5: 27 87% 67%;\r\n    --radius: 0.5rem;\r\n  }\r\n  .dark {\r\n    --background: 0 0% 3.9%;\r\n    --foreground: 0 0% 98%;\r\n    --card: 0 0% 3.9%;\r\n    --card-foreground: 0 0% 98%;\r\n    --popover: 0 0% 3.9%;\r\n    --popover-foreground: 0 0% 98%;\r\n    --primary: 0 0% 98%;\r\n    --primary-foreground: 0 0% 9%;\r\n    --secondary: 0 0% 14.9%;\r\n    --secondary-foreground: 0 0% 98%;\r\n    --muted: 0 0% 14.9%;\r\n    --muted-foreground: 0 0% 63.9%;\r\n    --accent: 0 0% 14.9%;\r\n    --accent-foreground: 0 0% 98%;\r\n    --destructive: 0 62.8% 30.6%;\r\n    --destructive-foreground: 0 0% 98%;\r\n    --border: 0 0% 14.9%;\r\n    --input: 0 0% 14.9%;\r\n    --ring: 0 0% 83.1%;\r\n    --chart-1: 220 70% 50%;\r\n    --chart-2: 160 60% 45%;\r\n    --chart-3: 30 80% 55%;\r\n    --chart-4: 280 65% 60%;\r\n    --chart-5: 340 75% 55%;\r\n  }\r\n}\r\n\r\n@layer base {\r\n  * {\r\n    @apply border-border;\r\n  }\r\n  body {\r\n    @apply bg-background text-foreground;\r\n  }\r\n}\r\n",
      "type": "registry:example",
      "target": "~/app\\globals.css"
    },
    {
      "path": "./app\\layout.tsx",
      "content": "import type { Metadata } from \"next\";\nimport \"./globals.css\";\nimport Layout from \"@/components/animations/layout\";\nimport { ClerkProvider } from \"@clerk/nextjs\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport { BackgroundBeamsWithCollision } from \"@/components/animations/background-beams-with-collision\";\nimport { Toaster } from \"@/components/ui/toaster\";\n\nexport const metadata: Metadata = {\n  title: \"Nextjs Template\",\n  description: \"Created by Prathamesh Chougale\",\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"en\">\n      <body>\n        <main>\n          <ThemeProvider\n            attribute=\"class\"\n            defaultTheme=\"dark\"\n            enableSystem\n            disableTransitionOnChange\n          >\n            <ClerkProvider>\n              <Layout>\n                <BackgroundBeamsWithCollision>\n                  {children}\n                </BackgroundBeamsWithCollision>\n              </Layout>\n              <Toaster />\n            </ClerkProvider>\n          </ThemeProvider>\n        </main>\n      </body>\n    </html>\n  );\n}\n",
      "type": "registry:example",
      "target": "~/app\\layout.tsx"
    },
    {
      "path": "./app\\page.tsx",
      "content": "\"use client\";\r\n\r\nimport React from \"react\";\r\nimport { motion } from \"framer-motion\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Card, CardContent } from \"@/components/ui/card\";\r\nimport Link from \"next/link\";\r\n\r\n// const ParallaxText = ({\r\n//   children,\r\n//   baseVelocity = 100,\r\n// }: {\r\n//   children: React.ReactNode;\r\n//   baseVelocity?: number;\r\n// }) => {\r\n//   const [rotate, setRotate] = useState(0);\r\n//   const baseX = useMotionValue(0);\r\n//   const { scrollY } = useScroll();\r\n//   const scrollVelocity = useVelocity(scrollY);\r\n//   const smoothVelocity = useSpring(scrollVelocity, {\r\n//     damping: 50,\r\n//     stiffness: 400,\r\n//   });\r\n//   const velocityFactor = useTransform(smoothVelocity, [0, 1000], [0, 5], {\r\n//     clamp: false,\r\n//   });\r\n\r\n//   const x = useTransform(baseX, (v) => `${wrap(-20, -45, v)}%`);\r\n\r\n//   useAnimationFrame((t, delta) => {\r\n//     let moveBy = baseVelocity * (delta / 1000);\r\n//     moveBy += moveBy * velocityFactor.get();\r\n//     baseX.set(baseX.get() + moveBy);\r\n\r\n//     setRotate(rotate + 0.1);\r\n//   });\r\n\r\n//   return (\r\n//     <div className=\"parallax\">\r\n//       <motion.div className=\"scroller\" style={{ x }}>\r\n//         <motion.span\r\n//           style={{ rotate: rotate }}\r\n//           className=\"text-4xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-purple-400 via-pink-500 to-red-500\"\r\n//         >\r\n//           {children}\r\n//         </motion.span>\r\n//       </motion.div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\nconst FloatingCard = ({\r\n  title,\r\n  content,\r\n}: {\r\n  title: string;\r\n  content: string;\r\n}) => {\r\n  return (\r\n    <motion.div\r\n      whileHover={{ scale: 1.05, rotate: [-1, 1, -1, 1, 0] }}\r\n      whileTap={{ scale: 0.95 }}\r\n    >\r\n      <Card className=\"dark:bg-white/10 bg-black/10 backdrop-blur-lg border-0 shadow-xl\">\r\n        <CardContent className=\"p-6\">\r\n          <h3 className=\"text-xl font-semibold mb-2\">{title}</h3>\r\n          <p className=\"text-black/80 dark:text-white/80\">{content}</p>\r\n        </CardContent>\r\n      </Card>\r\n    </motion.div>\r\n  );\r\n};\r\n\r\nconst HomePage = () => {\r\n  return (\r\n    <div className=\"min-h-screen w-full overflow-hidden\">\r\n      <main>\r\n        <section className=\"min-h-screen flex flex-col justify-center items-center relative\">\r\n          <motion.h1\r\n            initial={{ opacity: 0, y: -50 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            transition={{ duration: 0.8, delay: 0.5 }}\r\n            className=\"text-6xl md:text-8xl font-extrabold text-center mb-6 text-transparent bg-clip-text bg-gradient-to-r from-blue-400 via-purple-500 to-pink-500\"\r\n          >\r\n            Welcome to the Future\r\n          </motion.h1>\r\n          <motion.p\r\n            initial={{ opacity: 0, y: 50 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            transition={{ duration: 0.8, delay: 0.7 }}\r\n            className=\"text-xl md:text-2xl text-center mb-12 text-black/80 dark:text-white/80 max-w-2xl\"\r\n          >\r\n            Experience web development like never before. Dive into a world\r\n            where creativity meets technology.\r\n          </motion.p>\r\n          <motion.div\r\n            initial={{ opacity: 0, scale: 0.5 }}\r\n            animate={{ opacity: 1, scale: 1 }}\r\n            transition={{ duration: 0.5, delay: 1 }}\r\n          >\r\n            <Link href={\"/service\"}>\r\n              <Button className=\"bg-gradient-to-r from-pink-500 to-purple-500 hover:from-pink-600 hover:to-purple-600 text-white font-bold py-3 px-8 rounded-full text-lg shadow-lg hover:shadow-xl transition duration-300\">\r\n                Get Started\r\n              </Button>\r\n            </Link>\r\n          </motion.div>\r\n        </section>\r\n\r\n        <section className=\"py-12 lg:py-24\">\r\n          <div className=\"container mx-auto px-6\">\r\n            <h2 className=\"text-4xl md:text-5xl font-bold text-center mb-16\">\r\n              Our Stellar Services\r\n            </h2>\r\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\r\n              <FloatingCard\r\n                title=\"Quantum Web Design\"\r\n                content=\"Push the boundaries of design with our cutting-edge approach that blends aesthetics with functionality.\"\r\n              />\r\n              <FloatingCard\r\n                title=\"AI-Powered Development\"\r\n                content=\"Harness the power of artificial intelligence to create smart, adaptive web applications.\"\r\n              />\r\n              <FloatingCard\r\n                title=\"Blockchain Integration\"\r\n                content=\"Seamlessly integrate blockchain technology into your web projects for enhanced security and transparency.\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </section>\r\n\r\n        <section className=\"py-12 lg:py-24\">\r\n          <div className=\"container mx-auto px-6 text-center\">\r\n            <h2 className=\"text-4xl md:text-5xl font-bold mb-8\">\r\n              Ready to Start Your Journey?\r\n            </h2>\r\n            <p className=\"text-xl mb-12 text-black/80 dark:text-white/80 max-w-2xl mx-auto\">\r\n              Join us in shaping the future of web development. Let&apos;s\r\n              create something extraordinary together.\r\n            </p>\r\n            <Link href={\"/contact\"}>\r\n              <Button className=\"bg-gradient-to-r from-green-400 to-blue-500 hover:from-green-500 hover:to-blue-600 text-white font-bold py-3 px-8 rounded-full text-lg shadow-lg hover:shadow-xl transition duration-300\">\r\n                Contact Us\r\n              </Button>\r\n            </Link>\r\n          </div>\r\n        </section>\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n",
      "type": "registry:example",
      "target": "~/app\\page.tsx"
    },
    {
      "path": "./components\\animations\\background-beams-with-collision.tsx",
      "content": "\"use client\";\r\nimport { cn } from \"@/lib/utils\";\r\nimport { motion, AnimatePresence } from \"framer-motion\";\r\nimport React, { useRef, useState, useEffect } from \"react\";\r\n\r\nexport const BackgroundBeamsWithCollision = ({\r\n  children,\r\n  className,\r\n}: {\r\n  children: React.ReactNode;\r\n  className?: string;\r\n}) => {\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n  const parentRef = useRef<HTMLDivElement>(null);\r\n\r\n  const beams = [\r\n    {\r\n      initialX: 10,\r\n      translateX: 10,\r\n      duration: 7,\r\n      repeatDelay: 3,\r\n      delay: 2,\r\n    },\r\n    {\r\n      initialX: 600,\r\n      translateX: 600,\r\n      duration: 3,\r\n      repeatDelay: 3,\r\n      delay: 4,\r\n    },\r\n    {\r\n      initialX: 100,\r\n      translateX: 100,\r\n      duration: 7,\r\n      repeatDelay: 7,\r\n      className: \"h-6\",\r\n    },\r\n    {\r\n      initialX: 400,\r\n      translateX: 400,\r\n      duration: 5,\r\n      repeatDelay: 14,\r\n      delay: 4,\r\n    },\r\n    {\r\n      initialX: 800,\r\n      translateX: 800,\r\n      duration: 11,\r\n      repeatDelay: 2,\r\n      className: \"h-20\",\r\n    },\r\n    {\r\n      initialX: 1000,\r\n      translateX: 1000,\r\n      duration: 4,\r\n      repeatDelay: 2,\r\n      className: \"h-12\",\r\n    },\r\n    {\r\n      initialX: 1200,\r\n      translateX: 1200,\r\n      duration: 6,\r\n      repeatDelay: 4,\r\n      delay: 2,\r\n      className: \"h-6\",\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <div\r\n      ref={parentRef}\r\n      className={cn(\r\n        \"min-h-[46rem] bg-gradient-to-b from-white to-neutral-100 dark:from-neutral-950 dark:to-neutral-800 relative flex items-center w-full justify-center overflow-hidden\",\r\n        // h-screen if you want bigger\r\n        className\r\n      )}\r\n    >\r\n      {beams.map((beam) => (\r\n        <CollisionMechanism\r\n          key={beam.initialX + \"beam-idx\"}\r\n          beamOptions={beam}\r\n          containerRef={containerRef}\r\n          parentRef={parentRef}\r\n        />\r\n      ))}\r\n\r\n      {children}\r\n      <div\r\n        ref={containerRef}\r\n        className=\"absolute bottom-0 bg-neutral-100 w-full inset-x-0 pointer-events-none\"\r\n        style={{\r\n          boxShadow:\r\n            \"0 0 24px rgba(34, 42, 53, 0.06), 0 1px 1px rgba(0, 0, 0, 0.05), 0 0 0 1px rgba(34, 42, 53, 0.04), 0 0 4px rgba(34, 42, 53, 0.08), 0 16px 68px rgba(47, 48, 55, 0.05), 0 1px 0 rgba(255, 255, 255, 0.1) inset\",\r\n        }}\r\n      ></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst CollisionMechanism = React.forwardRef<\r\n  HTMLDivElement,\r\n  {\r\n    containerRef: React.RefObject<HTMLDivElement>;\r\n    parentRef: React.RefObject<HTMLDivElement>;\r\n    beamOptions?: {\r\n      initialX?: number;\r\n      translateX?: number;\r\n      initialY?: number;\r\n      translateY?: number;\r\n      rotate?: number;\r\n      className?: string;\r\n      duration?: number;\r\n      delay?: number;\r\n      repeatDelay?: number;\r\n    };\r\n  }\r\n>(({ parentRef, containerRef, beamOptions = {} }, ref) => {\r\n  const beamRef = useRef<HTMLDivElement>(null);\r\n  const [collision, setCollision] = useState<{\r\n    detected: boolean;\r\n    coordinates: { x: number; y: number } | null;\r\n  }>({\r\n    detected: false,\r\n    coordinates: null,\r\n  });\r\n  const [beamKey, setBeamKey] = useState(0);\r\n  const [cycleCollisionDetected, setCycleCollisionDetected] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const checkCollision = () => {\r\n      if (\r\n        beamRef.current &&\r\n        containerRef.current &&\r\n        parentRef.current &&\r\n        !cycleCollisionDetected\r\n      ) {\r\n        const beamRect = beamRef.current.getBoundingClientRect();\r\n        const containerRect = containerRef.current.getBoundingClientRect();\r\n        const parentRect = parentRef.current.getBoundingClientRect();\r\n\r\n        if (beamRect.bottom >= containerRect.top) {\r\n          const relativeX =\r\n            beamRect.left - parentRect.left + beamRect.width / 2;\r\n          const relativeY = beamRect.bottom - parentRect.top;\r\n\r\n          setCollision({\r\n            detected: true,\r\n            coordinates: {\r\n              x: relativeX,\r\n              y: relativeY,\r\n            },\r\n          });\r\n          setCycleCollisionDetected(true);\r\n        }\r\n      }\r\n    };\r\n\r\n    const animationInterval = setInterval(checkCollision, 50);\r\n\r\n    return () => clearInterval(animationInterval);\r\n  }, [cycleCollisionDetected, containerRef]);\r\n\r\n  useEffect(() => {\r\n    if (collision.detected && collision.coordinates) {\r\n      setTimeout(() => {\r\n        setCollision({ detected: false, coordinates: null });\r\n        setCycleCollisionDetected(false);\r\n      }, 2000);\r\n\r\n      setTimeout(() => {\r\n        setBeamKey((prevKey) => prevKey + 1);\r\n      }, 2000);\r\n    }\r\n  }, [collision]);\r\n\r\n  return (\r\n    <>\r\n      <motion.div\r\n        key={beamKey}\r\n        ref={beamRef}\r\n        animate=\"animate\"\r\n        initial={{\r\n          translateY: beamOptions.initialY || \"-200px\",\r\n          translateX: beamOptions.initialX || \"0px\",\r\n          rotate: beamOptions.rotate || 0,\r\n        }}\r\n        variants={{\r\n          animate: {\r\n            translateY: beamOptions.translateY || \"1800px\",\r\n            translateX: beamOptions.translateX || \"0px\",\r\n            rotate: beamOptions.rotate || 0,\r\n          },\r\n        }}\r\n        transition={{\r\n          duration: beamOptions.duration || 8,\r\n          repeat: Infinity,\r\n          repeatType: \"loop\",\r\n          ease: \"linear\",\r\n          delay: beamOptions.delay || 0,\r\n          repeatDelay: beamOptions.repeatDelay || 0,\r\n        }}\r\n        className={cn(\r\n          \"absolute left-0 top-20 m-auto h-14 w-px rounded-full bg-gradient-to-t from-indigo-500 via-purple-500 to-transparent\",\r\n          beamOptions.className\r\n        )}\r\n      />\r\n      <AnimatePresence>\r\n        {collision.detected && collision.coordinates && (\r\n          <Explosion\r\n            key={`${collision.coordinates.x}-${collision.coordinates.y}`}\r\n            className=\"\"\r\n            style={{\r\n              left: `${collision.coordinates.x}px`,\r\n              top: `${collision.coordinates.y}px`,\r\n              transform: \"translate(-50%, -50%)\",\r\n            }}\r\n          />\r\n        )}\r\n      </AnimatePresence>\r\n    </>\r\n  );\r\n});\r\n\r\nCollisionMechanism.displayName = \"CollisionMechanism\";\r\n\r\nconst Explosion = ({ ...props }: React.HTMLProps<HTMLDivElement>) => {\r\n  const spans = Array.from({ length: 20 }, (_, index) => ({\r\n    id: index,\r\n    initialX: 0,\r\n    initialY: 0,\r\n    directionX: Math.floor(Math.random() * 80 - 40),\r\n    directionY: Math.floor(Math.random() * -50 - 10),\r\n  }));\r\n\r\n  return (\r\n    <div {...props} className={cn(\"absolute z-50 h-2 w-2\", props.className)}>\r\n      <motion.div\r\n        initial={{ opacity: 0 }}\r\n        animate={{ opacity: 1 }}\r\n        exit={{ opacity: 0 }}\r\n        transition={{ duration: 1.5, ease: \"easeOut\" }}\r\n        className=\"absolute -inset-x-10 top-0 m-auto h-2 w-10 rounded-full bg-gradient-to-r from-transparent via-indigo-500 to-transparent blur-sm\"\r\n      ></motion.div>\r\n      {spans.map((span) => (\r\n        <motion.span\r\n          key={span.id}\r\n          initial={{ x: span.initialX, y: span.initialY, opacity: 1 }}\r\n          animate={{\r\n            x: span.directionX,\r\n            y: span.directionY,\r\n            opacity: 0,\r\n          }}\r\n          transition={{ duration: Math.random() * 1.5 + 0.5, ease: \"easeOut\" }}\r\n          className=\"absolute h-1 w-1 rounded-full bg-gradient-to-b from-indigo-500 to-purple-500\"\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n",
      "type": "registry:block"
    },
    {
      "path": "./components\\animations\\layout.tsx",
      "content": "\"use client\";\r\nimport React from \"react\";\r\nimport { motion } from \"framer-motion\";\r\nimport Navbar from \"../custom/navbar\";\r\nimport Footer from \"../custom/footer\";\r\n\r\nconst Layout: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  return (\r\n    <motion.div\r\n      className=\"flex flex-col min-h-[100dvh]\"\r\n      initial={{ opacity: 0 }}\r\n      animate={{ opacity: 1 }}\r\n      transition={{ duration: 0.5 }}\r\n    >\r\n      <Navbar />\r\n      <motion.main\r\n        className=\"flex-1\"\r\n        initial={{ y: 20, opacity: 0 }}\r\n        animate={{ y: 0, opacity: 1 }}\r\n        transition={{ delay: 0.2, duration: 0.5 }}\r\n      >\r\n        {children}\r\n      </motion.main>\r\n      <Footer />\r\n    </motion.div>\r\n  );\r\n};\r\n\r\nexport default Layout;\r\n",
      "type": "registry:block"
    },
    {
      "path": "./components\\animations\\link-preview.tsx",
      "content": "\"use client\";\r\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\";\r\nimport Image from \"next/image\";\r\nimport { encode } from \"qss\";\r\nimport React from \"react\";\r\nimport {\r\n  AnimatePresence,\r\n  motion,\r\n  useMotionValue,\r\n  useSpring,\r\n} from \"framer-motion\";\r\nimport Link from \"next/link\";\r\nimport { cn } from \"@/lib/utils\";\r\n\r\ntype LinkPreviewProps = {\r\n  children: React.ReactNode;\r\n  url: string;\r\n  className?: string;\r\n  width?: number;\r\n  height?: number;\r\n  quality?: number;\r\n  layout?: string;\r\n} & (\r\n  | { isStatic: true; imageSrc: string }\r\n  | { isStatic?: false; imageSrc?: never }\r\n);\r\n\r\nexport const LinkPreview = ({\r\n  children,\r\n  url,\r\n  className,\r\n  width = 200,\r\n  height = 125,\r\n  quality = 50,\r\n  layout = \"fixed\",\r\n  isStatic = false,\r\n  imageSrc = \"\",\r\n}: LinkPreviewProps) => {\r\n  let src;\r\n  if (!isStatic) {\r\n    const params = encode({\r\n      url,\r\n      screenshot: true,\r\n      meta: false,\r\n      embed: \"screenshot.url\",\r\n      colorScheme: \"dark\",\r\n      \"viewport.isMobile\": true,\r\n      \"viewport.deviceScaleFactor\": 1,\r\n      \"viewport.width\": width * 3,\r\n      \"viewport.height\": height * 3,\r\n    });\r\n    src = `https://api.microlink.io/?${params}`;\r\n  } else {\r\n    src = imageSrc;\r\n  }\r\n\r\n  const [isOpen, setOpen] = React.useState(false);\r\n\r\n  const [isMounted, setIsMounted] = React.useState(false);\r\n\r\n  React.useEffect(() => {\r\n    setIsMounted(true);\r\n  }, []);\r\n\r\n  const springConfig = { stiffness: 100, damping: 15 };\r\n  const x = useMotionValue(0);\r\n\r\n  const translateX = useSpring(x, springConfig);\r\n\r\n  const handleMouseMove = (event: React.MouseEvent<HTMLAnchorElement>) => {\r\n    const targetRect = (\r\n      event.target as HTMLAnchorElement\r\n    ).getBoundingClientRect();\r\n    const eventOffsetX = event.clientX - targetRect.left;\r\n    const offsetFromCenter = (eventOffsetX - targetRect.width / 2) / 2; // Reduce the effect to make it subtle\r\n    x.set(offsetFromCenter);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {isMounted ? (\r\n        <div className=\"hidden\">\r\n          <Image\r\n            src={src}\r\n            width={width}\r\n            height={height}\r\n            quality={quality}\r\n            layout={layout}\r\n            priority={true}\r\n            alt=\"hidden image\"\r\n          />\r\n        </div>\r\n      ) : null}\r\n\r\n      <HoverCardPrimitive.Root\r\n        openDelay={50}\r\n        closeDelay={100}\r\n        onOpenChange={(open) => {\r\n          setOpen(open);\r\n        }}\r\n      >\r\n        <HoverCardPrimitive.Trigger\r\n          onMouseMove={handleMouseMove}\r\n          className={cn(\"text-black dark:text-white\", className)}\r\n          href={url}\r\n        >\r\n          {children}\r\n        </HoverCardPrimitive.Trigger>\r\n\r\n        <HoverCardPrimitive.Content\r\n          className=\"[transform-origin:var(--radix-hover-card-content-transform-origin)]\"\r\n          side=\"top\"\r\n          align=\"center\"\r\n          sideOffset={10}\r\n        >\r\n          <AnimatePresence>\r\n            {isOpen && (\r\n              <motion.div\r\n                initial={{ opacity: 0, y: 20, scale: 0.6 }}\r\n                animate={{\r\n                  opacity: 1,\r\n                  y: 0,\r\n                  scale: 1,\r\n                  transition: {\r\n                    type: \"spring\",\r\n                    stiffness: 260,\r\n                    damping: 20,\r\n                  },\r\n                }}\r\n                exit={{ opacity: 0, y: 20, scale: 0.6 }}\r\n                className=\"shadow-xl rounded-xl\"\r\n                style={{\r\n                  x: translateX,\r\n                }}\r\n              >\r\n                <Link\r\n                  href={url}\r\n                  className=\"block p-1 bg-white border-2 border-transparent shadow rounded-xl hover:border-neutral-200 dark:hover:border-neutral-800\"\r\n                  style={{ fontSize: 0 }}\r\n                  target=\"_blank\"\r\n                >\r\n                  <Image\r\n                    src={isStatic ? imageSrc : src}\r\n                    width={width}\r\n                    height={height}\r\n                    quality={quality}\r\n                    layout={layout}\r\n                    priority={true}\r\n                    className=\"rounded-lg\"\r\n                    alt=\"preview image\"\r\n                  />\r\n                </Link>\r\n              </motion.div>\r\n            )}\r\n          </AnimatePresence>\r\n        </HoverCardPrimitive.Content>\r\n      </HoverCardPrimitive.Root>\r\n    </>\r\n  );\r\n};\r\n",
      "type": "registry:block"
    },
    {
      "path": "./components\\custom\\darkmode.tsx",
      "content": "\"use client\";\r\nimport * as React from \"react\";\r\nimport { MoonIcon, SunIcon } from \"@radix-ui/react-icons\";\r\nimport { useTheme } from \"next-themes\";\r\nimport { Button } from \"@/components/ui/button\";\r\nconst ModeToggle = () => {\r\n  const { setTheme } = useTheme();\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        variant=\"outline\"\r\n        className=\"dark:hidden cursor-none\"\r\n        size=\"icon\"\r\n        onClick={() => setTheme(\"dark\")}\r\n      >\r\n        <SunIcon className=\"h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0\" />\r\n      </Button>\r\n      <Button\r\n        variant=\"outline\"\r\n        className=\"hidden dark:flex cursor-none\"\r\n        size=\"icon\"\r\n        onClick={() => setTheme(\"light\")}\r\n      >\r\n        <MoonIcon className=\"absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100\" />\r\n      </Button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ModeToggle;\r\n",
      "type": "registry:block"
    },
    {
      "path": "./components\\custom\\footer.tsx",
      "content": "\"use client\";\r\nimport React from \"react\";\r\nimport Link from \"next/link\";\r\nimport { motion } from \"framer-motion\";\r\nimport {\r\n  MountainIcon,\r\n  TwitterIcon,\r\n  FacebookIcon,\r\n  InstagramIcon,\r\n} from \"../icons\";\r\nimport { LinkPreview } from \"../animations/link-preview\";\r\n\r\nconst Footer: React.FC = () => {\r\n  return (\r\n    <motion.footer\r\n      className=\"bg-muted border-t\"\r\n      initial={{ opacity: 0 }}\r\n      animate={{ opacity: 1 }}\r\n      transition={{ delay: 0.5, duration: 0.5 }}\r\n    >\r\n      <div className=\"container mx-auto px-4 md:px-6 py-8 flex flex-col md:flex-row items-center justify-between gap-4\">\r\n        <motion.div\r\n          className=\"flex items-center gap-2\"\r\n          whileHover={{ scale: 1.05 }}\r\n        >\r\n          <MountainIcon className=\"h-6 w-6\" />\r\n          <span className=\"text-sm text-muted-foreground\">\r\n            &copy; by{\" \"}\r\n            <LinkPreview\r\n              url=\"https://prathameshchougale.me\"\r\n              className=\"font-bold bg-clip-text text-transparent bg-gradient-to-br from-purple-500 to-pink-500\"\r\n            >\r\n              Prathamesh Chougale\r\n            </LinkPreview>{\" \"}\r\n            . All rights reserved.\r\n          </span>\r\n        </motion.div>\r\n        <div className=\"flex items-center gap-4\">\r\n          <Link\r\n            href=\"#\"\r\n            className=\"text-sm text-muted-foreground hover:underline\"\r\n            prefetch={false}\r\n          >\r\n            Privacy\r\n          </Link>\r\n          <Link\r\n            href=\"#\"\r\n            className=\"text-sm text-muted-foreground hover:underline\"\r\n            prefetch={false}\r\n          >\r\n            Terms\r\n          </Link>\r\n          <div className=\"flex items-center gap-2\">\r\n            {[TwitterIcon, FacebookIcon, InstagramIcon].map((Icon, index) => (\r\n              <motion.div\r\n                key={index}\r\n                whileHover={{ scale: 1.2, rotate: 15 }}\r\n                whileTap={{ scale: 0.8 }}\r\n              >\r\n                <Link\r\n                  href=\"#\"\r\n                  className=\"text-muted-foreground hover:text-primary\"\r\n                  prefetch={false}\r\n                >\r\n                  <Icon className=\"h-5 w-5\" />\r\n                  <span className=\"sr-only\">\r\n                    {Icon.name.replace(\"Icon\", \"\")}\r\n                  </span>\r\n                </Link>\r\n              </motion.div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </motion.footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n",
      "type": "registry:block"
    },
    {
      "path": "./components\\custom\\navbar.tsx",
      "content": "// components/Navbar.tsx\r\n\"use client\";\r\n\r\nimport React from \"react\";\r\nimport Link from \"next/link\";\r\nimport { usePathname } from \"next/navigation\";\r\nimport { Menu, Package2, Search } from \"lucide-react\";\r\nimport { SignInButton, SignedIn, SignedOut, UserButton } from \"@clerk/nextjs\";\r\n\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  Sheet,\r\n  SheetContent,\r\n  SheetTrigger,\r\n  SheetTitle,\r\n  SheetDescription,\r\n} from \"@/components/ui/sheet\";\r\nimport { Input } from \"../ui/input\";\r\nimport ModeToggle from \"./darkmode\";\r\n\r\nconst Navbar: React.FC = () => {\r\n  const pathname = usePathname();\r\n\r\n  const routes = [\r\n    { href: \"/\", label: \"Home\" },\r\n    { href: \"/about\", label: \"About\" },\r\n    { href: \"/services\", label: \"Services\" },\r\n    { href: \"/contact\", label: \"Contact\" },\r\n  ];\r\n\r\n  return (\r\n    <header className=\"sticky top-0 flex h-16 items-center gap-4 border-b bg-background z-50 px-4 md:px-6\">\r\n      <nav className=\"hidden flex-col gap-6 text-lg font-medium md:flex md:flex-row md:items-center md:gap-5 md:text-sm lg:gap-6\">\r\n        <Link\r\n          href=\"/\"\r\n          className=\"flex items-center gap-2 text-lg font-semibold md:text-base\"\r\n        >\r\n          <Package2 className=\"h-6 w-6\" />\r\n          <span className=\"sr-only\">Acme Inc</span>\r\n        </Link>\r\n        {routes.map((route) => (\r\n          <NavLink\r\n            key={route.href}\r\n            href={route.href}\r\n            isActive={pathname === route.href}\r\n          >\r\n            {route.label}\r\n          </NavLink>\r\n        ))}\r\n      </nav>\r\n      <Sheet>\r\n        <SheetTrigger asChild>\r\n          <Button variant=\"outline\" size=\"icon\" className=\"shrink-0 md:hidden\">\r\n            <Menu className=\"h-5 w-5\" />\r\n            <span className=\"sr-only\">Toggle navigation menu</span>\r\n          </Button>\r\n        </SheetTrigger>\r\n        <SheetContent side=\"left\">\r\n          <SheetTitle className=\"ml-3 mb-3\">\r\n            <Package2 className=\"h-6 w-6\" />\r\n            <span className=\"sr-only\">Acme Inc</span>\r\n          </SheetTitle>\r\n          <SheetDescription></SheetDescription>\r\n          <nav className=\"flex flex-col gap-4\">\r\n            {routes.map((route) => (\r\n              <NavLink\r\n                key={route.href}\r\n                href={route.href}\r\n                isActive={pathname === route.href}\r\n                mobile\r\n              >\r\n                {route.label}\r\n              </NavLink>\r\n            ))}\r\n          </nav>\r\n        </SheetContent>\r\n      </Sheet>\r\n      <div className=\"flex w-full items-center gap-4 md:ml-auto md:gap-2 lg:gap-4\">\r\n        <form className=\"ml-auto flex-1 sm:flex-initial\">\r\n          <div className=\"relative\">\r\n            <Search className=\"absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground\" />\r\n            <Input\r\n              type=\"search\"\r\n              placeholder=\"Search products...\"\r\n              className=\"pl-8 sm:w-[300px] md:w-[200px] lg:w-[300px]\"\r\n            />\r\n          </div>\r\n        </form>\r\n        <ModeToggle />\r\n        <SignedOut>\r\n          <SignInButton />\r\n        </SignedOut>\r\n        <SignedIn>\r\n          <UserButton />\r\n        </SignedIn>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\ninterface NavLinkProps {\r\n  href: string;\r\n  children: React.ReactNode;\r\n  isActive: boolean;\r\n  mobile?: boolean;\r\n}\r\n\r\nconst NavLink: React.FC<NavLinkProps> = ({\r\n  href,\r\n  children,\r\n  isActive,\r\n  mobile,\r\n}) => {\r\n  const baseStyles = \"font-medium transition-colors duration-200\";\r\n  const mobileStyles = mobile\r\n    ? \"block text-lg py-2 px-4 rounded-md\"\r\n    : \"inline-flex items-center px-3 py-2 rounded-md text-sm\";\r\n  const activeStyles = isActive\r\n    ? \"bg-primary/10 text-primary\"\r\n    : \"text-foreground/60 hover:text-foreground hover:bg-accent\";\r\n\r\n  return (\r\n    <Link\r\n      href={href}\r\n      className={`${baseStyles} ${mobileStyles} ${activeStyles}`}\r\n    >\r\n      {children}\r\n    </Link>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n",
      "type": "registry:block"
    },
    {
      "path": "./components\\custom\\stellar-dev-navbar.tsx",
      "content": "\"use client\";\r\nimport { motion } from \"framer-motion\";\r\nimport React from \"react\";\r\nimport { Button } from \"../ui/button\";\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <header className=\"fixed top-0 left-0 w-full z-50 bg-black/20 backdrop-blur-lg\">\r\n      <nav className=\"container mx-auto px-6 py-4 flex justify-between items-center\">\r\n        <motion.div\r\n          initial={{ opacity: 0, x: -50 }}\r\n          animate={{ opacity: 1, x: 0 }}\r\n          transition={{ duration: 0.5 }}\r\n        >\r\n          <span className=\"text-2xl font-bold\">StellarDev</span>\r\n        </motion.div>\r\n        <motion.div\r\n          initial={{ opacity: 0, x: 50 }}\r\n          animate={{ opacity: 1, x: 0 }}\r\n          transition={{ duration: 0.5, delay: 0.2 }}\r\n          className=\"space-x-4\"\r\n        >\r\n          <Button variant=\"ghost\" className=\"text-white hover:text-purple-300\">\r\n            About\r\n          </Button>\r\n          <Button variant=\"ghost\" className=\"text-white hover:text-purple-300\">\r\n            Services\r\n          </Button>\r\n          <Button variant=\"ghost\" className=\"text-white hover:text-purple-300\">\r\n            Contact\r\n          </Button>\r\n        </motion.div>\r\n      </nav>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n",
      "type": "registry:block"
    },
    {
      "path": "./components\\icons\\ChevronRightIcon.tsx",
      "content": "const ChevronRightIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (\r\n  <svg\r\n    {...props}\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width=\"24\"\r\n    height=\"24\"\r\n    viewBox=\"0 0 24 24\"\r\n    fill=\"none\"\r\n    stroke=\"currentColor\"\r\n    strokeWidth=\"2\"\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n  >\r\n    <path d=\"m9 18 6-6-6-6\" />\r\n  </svg>\r\n);\r\n\r\nexport default ChevronRightIcon;\r\n",
      "type": "registry:block"
    },
    {
      "path": "./components\\icons\\FacebookIcon.tsx",
      "content": "const FacebookIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (\r\n  <svg\r\n    {...props}\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width=\"24\"\r\n    height=\"24\"\r\n    viewBox=\"0 0 24 24\"\r\n    fill=\"none\"\r\n    stroke=\"currentColor\"\r\n    strokeWidth=\"2\"\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n  >\r\n    <path d=\"M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z\" />\r\n  </svg>\r\n);\r\n\r\nexport default FacebookIcon;\r\n",
      "type": "registry:block"
    },
    {
      "path": "./components\\icons\\index.ts",
      "content": "import ChevronRightIcon from \"./ChevronRightIcon\";\r\nimport MenuIcon from \"./MenuIcon\";\r\nimport InstagramIcon from \"./InstagramIcon\";\r\nimport TwitterIcon from \"./TwitterIcon\";\r\nimport FacebookIcon from \"./FacebookIcon\";\r\nimport MountainIcon from \"./MountainIcon\";\r\n\r\nexport { ChevronRightIcon, MenuIcon, InstagramIcon, TwitterIcon, FacebookIcon, MountainIcon };\r\n",
      "type": "registry:block"
    },
    {
      "path": "./components\\icons\\InstagramIcon.tsx",
      "content": "const InstagramIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (\r\n  <svg\r\n    {...props}\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width=\"24\"\r\n    height=\"24\"\r\n    viewBox=\"0 0 24 24\"\r\n    fill=\"none\"\r\n    stroke=\"currentColor\"\r\n    strokeWidth=\"2\"\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n  >\r\n    <rect width=\"20\" height=\"20\" x=\"2\" y=\"2\" rx=\"5\" ry=\"5\" />\r\n    <path d=\"M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z\" />\r\n    <line x1=\"17.5\" x2=\"17.51\" y1=\"6.5\" y2=\"6.5\" />\r\n  </svg>\r\n);\r\n\r\nexport default InstagramIcon;\r\n",
      "type": "registry:block"
    },
    {
      "path": "./components\\icons\\MenuIcon.tsx",
      "content": "const MenuIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (\r\n  <svg\r\n    {...props}\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width=\"24\"\r\n    height=\"24\"\r\n    viewBox=\"0 0 24 24\"\r\n    fill=\"none\"\r\n    stroke=\"currentColor\"\r\n    strokeWidth=\"2\"\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n  >\r\n    <line x1=\"4\" x2=\"20\" y1=\"12\" y2=\"12\" />\r\n    <line x1=\"4\" x2=\"20\" y1=\"6\" y2=\"6\" />\r\n    <line x1=\"4\" x2=\"20\" y1=\"18\" y2=\"18\" />\r\n  </svg>\r\n);\r\n\r\nexport default MenuIcon;\r\n",
      "type": "registry:block"
    },
    {
      "path": "./components\\icons\\MountainIcon.tsx",
      "content": "const MountainIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (\r\n  <svg\r\n    {...props}\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width=\"24\"\r\n    height=\"24\"\r\n    viewBox=\"0 0 24 24\"\r\n    fill=\"none\"\r\n    stroke=\"currentColor\"\r\n    strokeWidth=\"2\"\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n  >\r\n    <path d=\"m8 3 4 8 5-5 5 15H2L8 3z\" />\r\n  </svg>\r\n);\r\n\r\nexport default MountainIcon;\r\n",
      "type": "registry:block"
    },
    {
      "path": "./components\\icons\\TwitterIcon.tsx",
      "content": "const TwitterIcon: React.FC<React.SVGProps<SVGSVGElement>> = (props) => (\r\n  <svg\r\n    {...props}\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n    width=\"24\"\r\n    height=\"24\"\r\n    viewBox=\"0 0 24 24\"\r\n    fill=\"none\"\r\n    stroke=\"currentColor\"\r\n    strokeWidth=\"2\"\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n  >\r\n    <path d=\"M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z\" />\r\n  </svg>\r\n);\r\n\r\nexport default TwitterIcon;\r\n",
      "type": "registry:block"
    },
    {
      "path": "./components\\mongodb\\clientpromise.ts",
      "content": "import { MongoClient } from \"mongodb\";\r\n\r\nif (!process.env.MONGODB_URI) {\r\n    throw new Error(\"Please add your Mongo URI to .env.local\");\r\n}\r\n\r\nconst uri: string = process.env.MONGODB_URI;\r\nlet client: MongoClient;\r\nlet clientPromise: Promise<MongoClient>;\r\n\r\nif (process.env.NODE_ENV === \"development\") {\r\n\r\n    let globalWithMongoClientPromise = global as typeof globalThis & {\r\n        _mongoClientPromise: Promise<MongoClient>;\r\n    };\r\n\r\n    if (!globalWithMongoClientPromise._mongoClientPromise) {\r\n        client = new MongoClient(uri);\r\n        globalWithMongoClientPromise._mongoClientPromise = client.connect();\r\n    }\r\n    clientPromise = globalWithMongoClientPromise._mongoClientPromise;\r\n} else {\r\n    client = new MongoClient(uri);\r\n    clientPromise = client.connect();\r\n}\r\nexport default clientPromise;",
      "type": "registry:block"
    },
    {
      "path": "./components\\svg\\aboutsvg.tsx",
      "content": "\"use client\";\r\nimport React, { useState, useEffect, useCallback } from \"react\";\r\nimport { motion, useAnimation } from \"framer-motion\";\r\n\r\nconst AboutPageAnimation = () => {\r\n  const [cursorPosition, setCursorPosition] = useState({ x: 0, y: 0 });\r\n  const [isHovering, setIsHovering] = useState(false);\r\n  const controls = useAnimation();\r\n\r\n  const handleMouseMove = useCallback(\r\n    (event: {\r\n      currentTarget: { getBoundingClientRect: () => any };\r\n      clientX: number;\r\n      clientY: number;\r\n    }) => {\r\n      const rect = event.currentTarget.getBoundingClientRect();\r\n      setCursorPosition({\r\n        x: event.clientX - rect.left,\r\n        y: event.clientY - rect.top,\r\n      });\r\n    },\r\n    []\r\n  );\r\n\r\n  useEffect(() => {\r\n    controls.start(\"visible\");\r\n  }, [controls]);\r\n\r\n  const svgVariants = {\r\n    hidden: { opacity: 0 },\r\n    visible: {\r\n      opacity: 1,\r\n      transition: {\r\n        duration: 1,\r\n        staggerChildren: 0.2,\r\n      },\r\n    },\r\n  };\r\n\r\n  const pathVariants = {\r\n    hidden: { pathLength: 0, opacity: 0 },\r\n    visible: {\r\n      pathLength: 1,\r\n      opacity: 1,\r\n      transition: {\r\n        duration: 2,\r\n        ease: \"easeInOut\",\r\n      },\r\n    },\r\n  };\r\n\r\n  const nodeVariants = {\r\n    hidden: { scale: 0, opacity: 0 },\r\n    visible: {\r\n      scale: 1,\r\n      opacity: 1,\r\n      transition: {\r\n        type: \"spring\",\r\n        stiffness: 300,\r\n        damping: 20,\r\n      },\r\n    },\r\n  };\r\n\r\n  const textVariants = {\r\n    hidden: { opacity: 0, y: 20 },\r\n    visible: {\r\n      opacity: 1,\r\n      y: 0,\r\n      transition: {\r\n        delay: 2,\r\n        duration: 0.5,\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"w-full h-full relative\"\r\n      onMouseMove={handleMouseMove}\r\n      onMouseEnter={() => setIsHovering(true)}\r\n      onMouseLeave={() => setIsHovering(false)}\r\n    >\r\n      <motion.svg\r\n        viewBox=\"0 0 800 600\"\r\n        initial=\"hidden\"\r\n        animate=\"visible\"\r\n        variants={svgVariants}\r\n        className=\"w-full h-full\"\r\n      >\r\n        <defs>\r\n          <linearGradient id=\"gradient1\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\r\n            <stop offset=\"0%\" stopColor=\"#4F46E5\" />\r\n            <stop offset=\"100%\" stopColor=\"#7C3AED\" />\r\n          </linearGradient>\r\n          <filter id=\"glow\">\r\n            <feGaussianBlur stdDeviation=\"3.5\" result=\"coloredBlur\" />\r\n            <feMerge>\r\n              <feMergeNode in=\"coloredBlur\" />\r\n              <feMergeNode in=\"SourceGraphic\" />\r\n            </feMerge>\r\n          </filter>\r\n        </defs>\r\n\r\n        {/* Background elements */}\r\n        <motion.circle\r\n          cx=\"400\"\r\n          cy=\"300\"\r\n          r=\"250\"\r\n          fill=\"url(#gradient1)\"\r\n          opacity=\"0.1\"\r\n          variants={nodeVariants}\r\n        />\r\n\r\n        {/* Network of connections */}\r\n        <motion.path\r\n          d=\"M100,300 Q250,100 400,300 Q550,500 700,300\"\r\n          stroke=\"#8B5CF6\"\r\n          strokeWidth=\"2\"\r\n          fill=\"none\"\r\n          filter=\"url(#glow)\"\r\n          variants={pathVariants}\r\n        />\r\n        <motion.path\r\n          d=\"M100,400 Q250,600 400,400 Q550,200 700,400\"\r\n          stroke=\"#8B5CF6\"\r\n          strokeWidth=\"2\"\r\n          fill=\"none\"\r\n          filter=\"url(#glow)\"\r\n          variants={pathVariants}\r\n        />\r\n\r\n        {/* Interactive nodes */}\r\n        {[\r\n          { cx: 100, cy: 300 },\r\n          { cx: 400, cy: 300 },\r\n          { cx: 700, cy: 300 },\r\n          { cx: 100, cy: 400 },\r\n          { cx: 400, cy: 400 },\r\n          { cx: 700, cy: 400 },\r\n        ].map((node, index) => (\r\n          <motion.circle\r\n            key={index}\r\n            cx={node.cx}\r\n            cy={node.cy}\r\n            r=\"10\"\r\n            fill=\"#10B981\"\r\n            variants={nodeVariants}\r\n            whileHover={{ scale: 1.5, fill: \"#34D399\" }}\r\n          />\r\n        ))}\r\n\r\n        {/* Dynamic cursor effect */}\r\n        <motion.circle\r\n          cx={cursorPosition.x}\r\n          cy={cursorPosition.y}\r\n          r={isHovering ? \"30\" : \"0\"}\r\n          fill=\"#60A5FA\"\r\n          initial={{ opacity: 0 }}\r\n          animate={{ opacity: isHovering ? 0.3 : 0 }}\r\n          transition={{ duration: 0.3 }}\r\n        />\r\n\r\n        {/* Animated text */}\r\n        <motion.text\r\n          x=\"400\"\r\n          y=\"550\"\r\n          textAnchor=\"middle\"\r\n          fill=\"#fff\"\r\n          fontSize=\"24\"\r\n          fontWeight=\"bold\"\r\n          variants={textVariants}\r\n        >\r\n          Innovate ΓÇó Grow ΓÇó Lead\r\n        </motion.text>\r\n      </motion.svg>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AboutPageAnimation;\r\n",
      "type": "registry:block"
    },
    {
      "path": "./components\\svg\\contactsvg.tsx",
      "content": "\"use client\";\r\nimport React, { useState, useEffect, useCallback } from \"react\";\r\nimport { motion, useAnimation } from \"framer-motion\";\r\n\r\nconst ContactPageAnimation = () => {\r\n  const [cursorPosition, setCursorPosition] = useState({ x: 0, y: 0 });\r\n  const [isHovering, setIsHovering] = useState(false);\r\n  const controls = useAnimation();\r\n\r\n  const handleMouseMove = useCallback(\r\n    (event: {\r\n      currentTarget: { getBoundingClientRect: () => any };\r\n      clientX: number;\r\n      clientY: number;\r\n    }) => {\r\n      const rect = event.currentTarget.getBoundingClientRect();\r\n      setCursorPosition({\r\n        x: event.clientX - rect.left,\r\n        y: event.clientY - rect.top,\r\n      });\r\n    },\r\n    []\r\n  );\r\n\r\n  useEffect(() => {\r\n    controls.start(\"visible\");\r\n  }, [controls]);\r\n\r\n  const svgVariants = {\r\n    hidden: { opacity: 0 },\r\n    visible: {\r\n      opacity: 1,\r\n      transition: {\r\n        duration: 1,\r\n        staggerChildren: 0.2,\r\n      },\r\n    },\r\n  };\r\n\r\n  const pathVariants = {\r\n    hidden: { pathLength: 0, opacity: 0 },\r\n    visible: {\r\n      pathLength: 1,\r\n      opacity: 1,\r\n      transition: {\r\n        duration: 2,\r\n        ease: \"easeInOut\",\r\n      },\r\n    },\r\n  };\r\n\r\n  const nodeVariants = {\r\n    hidden: { scale: 0, opacity: 0 },\r\n    visible: {\r\n      scale: 1,\r\n      opacity: 1,\r\n      transition: {\r\n        type: \"spring\",\r\n        stiffness: 300,\r\n        damping: 20,\r\n      },\r\n    },\r\n  };\r\n\r\n  const pulseVariants = {\r\n    hidden: { scale: 0.8, opacity: 0.5 },\r\n    visible: {\r\n      scale: 1.2,\r\n      opacity: 1,\r\n      transition: {\r\n        yoyo: Infinity,\r\n        duration: 1.5,\r\n        ease: \"easeInOut\",\r\n      },\r\n    },\r\n  };\r\n\r\n  const messageVariants = {\r\n    hidden: { x: -50, opacity: 0 },\r\n    visible: {\r\n      x: 0,\r\n      opacity: 1,\r\n      transition: {\r\n        type: \"spring\",\r\n        stiffness: 100,\r\n        damping: 10,\r\n        repeat: Infinity,\r\n        repeatDelay: 3,\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"w-full h-full relative\"\r\n      onMouseMove={handleMouseMove}\r\n      onMouseEnter={() => setIsHovering(true)}\r\n      onMouseLeave={() => setIsHovering(false)}\r\n    >\r\n      <motion.svg\r\n        viewBox=\"0 0 800 600\"\r\n        initial=\"hidden\"\r\n        animate=\"visible\"\r\n        variants={svgVariants}\r\n        className=\"w-full h-full\"\r\n      >\r\n        <defs>\r\n          <radialGradient\r\n            id=\"globalGradient\"\r\n            cx=\"50%\"\r\n            cy=\"50%\"\r\n            r=\"50%\"\r\n            fx=\"50%\"\r\n            fy=\"50%\"\r\n          >\r\n            <stop offset=\"0%\" stopColor=\"#3B82F6\" stopOpacity=\"0.3\" />\r\n            <stop offset=\"100%\" stopColor=\"#3B82F6\" stopOpacity=\"0\" />\r\n          </radialGradient>\r\n          <filter id=\"glow\">\r\n            <feGaussianBlur stdDeviation=\"3.5\" result=\"coloredBlur\" />\r\n            <feMerge>\r\n              <feMergeNode in=\"coloredBlur\" />\r\n              <feMergeNode in=\"SourceGraphic\" />\r\n            </feMerge>\r\n          </filter>\r\n        </defs>\r\n\r\n        {/* Global connectivity background */}\r\n        <motion.circle\r\n          cx=\"400\"\r\n          cy=\"300\"\r\n          r=\"280\"\r\n          fill=\"url(#globalGradient)\"\r\n          variants={nodeVariants}\r\n        />\r\n\r\n        {/* Communication paths */}\r\n        <motion.path\r\n          d=\"M100,300 C250,100 550,500 700,300\"\r\n          stroke=\"#60A5FA\"\r\n          strokeWidth=\"2\"\r\n          fill=\"none\"\r\n          filter=\"url(#glow)\"\r\n          variants={pathVariants}\r\n        />\r\n        <motion.path\r\n          d=\"M100,400 C250,600 550,200 700,400\"\r\n          stroke=\"#60A5FA\"\r\n          strokeWidth=\"2\"\r\n          fill=\"none\"\r\n          filter=\"url(#glow)\"\r\n          variants={pathVariants}\r\n        />\r\n\r\n        {/* Communication nodes */}\r\n        {[\r\n          { cx: 100, cy: 300 },\r\n          { cx: 700, cy: 300 },\r\n          { cx: 100, cy: 400 },\r\n          { cx: 700, cy: 400 },\r\n          { cx: 400, cy: 300 },\r\n        ].map((node, index) => (\r\n          <g key={index}>\r\n            <motion.circle\r\n              cx={node.cx}\r\n              cy={node.cy}\r\n              r=\"12\"\r\n              fill=\"#2563EB\"\r\n              variants={nodeVariants}\r\n              whileHover={{ scale: 1.5, fill: \"#3B82F6\" }}\r\n            />\r\n            <motion.circle\r\n              cx={node.cx}\r\n              cy={node.cy}\r\n              r=\"20\"\r\n              stroke=\"#60A5FA\"\r\n              strokeWidth=\"2\"\r\n              fill=\"none\"\r\n              variants={pulseVariants}\r\n            />\r\n          </g>\r\n        ))}\r\n\r\n        {/* Message animations */}\r\n        <motion.circle\r\n          cx=\"100\"\r\n          cy=\"300\"\r\n          r=\"8\"\r\n          fill=\"#F59E0B\"\r\n          variants={messageVariants}\r\n        />\r\n        <motion.circle\r\n          cx=\"700\"\r\n          cy=\"400\"\r\n          r=\"8\"\r\n          fill=\"#F59E0B\"\r\n          variants={messageVariants}\r\n        />\r\n\r\n        {/* Interactive cursor effect */}\r\n        <motion.circle\r\n          cx={cursorPosition.x}\r\n          cy={cursorPosition.y}\r\n          r={isHovering ? \"30\" : \"0\"}\r\n          fill=\"#F59E0B\"\r\n          initial={{ opacity: 0 }}\r\n          animate={{ opacity: isHovering ? 0.3 : 0 }}\r\n          transition={{ duration: 0.3 }}\r\n        />\r\n\r\n        {/* Central icon */}\r\n        <motion.path\r\n          d=\"M385,285 h30 v30 h-30 Z M400,270 v60 M370,300 h60\"\r\n          stroke=\"#F59E0B\"\r\n          strokeWidth=\"4\"\r\n          fill=\"none\"\r\n          variants={pathVariants}\r\n        />\r\n\r\n        {/* Animated text */}\r\n        <motion.text\r\n          x=\"400\"\r\n          y=\"550\"\r\n          textAnchor=\"middle\"\r\n          fill=\"#fff\"\r\n          fontSize=\"24\"\r\n          fontWeight=\"bold\"\r\n          initial={{ opacity: 0, y: 20 }}\r\n          animate={{ opacity: 1, y: 0 }}\r\n          transition={{ delay: 2, duration: 0.5 }}\r\n        >\r\n          Connect ΓÇó Communicate ΓÇó Collaborate\r\n        </motion.text>\r\n      </motion.svg>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContactPageAnimation;\r\n",
      "type": "registry:block"
    },
    {
      "path": "./components\\svg\\planets.tsx",
      "content": "\"use client\";\r\nimport React, { useState, useEffect, useCallback } from \"react\";\r\nimport {\r\n  motion,\r\n  useAnimation,\r\n  useMotionValue,\r\n  useTransform,\r\n} from \"framer-motion\";\r\n\r\nconst CosmicHomePage = () => {\r\n  const [cursorPosition, setCursorPosition] = useState({ x: 0, y: 0 });\r\n  const controls = useAnimation();\r\n  const yMotion = useMotionValue(0);\r\n  const xMotion = useMotionValue(0);\r\n  const rotateX = useTransform(yMotion, [-300, 300], [15, -15]);\r\n  const rotateY = useTransform(xMotion, [-300, 300], [-15, 15]);\r\n\r\n  const handleMouseMove = useCallback(\r\n    (event: { currentTarget?: any; clientX?: any; clientY?: any }) => {\r\n      const { clientX, clientY } = event;\r\n      const rect = event.currentTarget.getBoundingClientRect();\r\n      const x = clientX - rect.left - rect.width / 2;\r\n      const y = clientY - rect.top - rect.height / 2;\r\n      setCursorPosition({ x, y });\r\n      xMotion.set(x);\r\n      yMotion.set(y);\r\n    },\r\n    [xMotion, yMotion]\r\n  );\r\n\r\n  useEffect(() => {\r\n    controls.start({\r\n      opacity: 1,\r\n      scale: 1,\r\n      transition: { duration: 1.5, ease: \"easeOut\" },\r\n    });\r\n  }, [controls]);\r\n\r\n  const starVariants = {\r\n    hidden: { opacity: 0, scale: 0 },\r\n    visible: {\r\n      opacity: 1,\r\n      scale: 1,\r\n      transition: {\r\n        duration: 0.5,\r\n        yoyo: Infinity,\r\n        repeatDelay: Math.random() * 2,\r\n      },\r\n    },\r\n  };\r\n\r\n  const planetVariants = {\r\n    hidden: { scale: 0, opacity: 0 },\r\n    visible: {\r\n      scale: 1,\r\n      opacity: 1,\r\n      transition: {\r\n        type: \"spring\",\r\n        stiffness: 100,\r\n        damping: 10,\r\n        delay: 0.5,\r\n      },\r\n    },\r\n  };\r\n\r\n  const textVariants = {\r\n    hidden: { opacity: 0, y: 50 },\r\n    visible: {\r\n      opacity: 1,\r\n      y: 0,\r\n      transition: {\r\n        duration: 1,\r\n        delay: 1,\r\n      },\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"w-full h-screen bg-black overflow-hidden relative\"\r\n      onMouseMove={handleMouseMove}\r\n    >\r\n      <motion.div\r\n        className=\"w-full h-full\"\r\n        style={{ rotateX, rotateY, perspective: 1000 }}\r\n      >\r\n        <svg\r\n          viewBox=\"0 0 1000 1000\"\r\n          className=\"w-full h-full absolute top-0 left-0\"\r\n        >\r\n          <defs>\r\n            <radialGradient id=\"cosmos\" cx=\"50%\" cy=\"50%\" r=\"50%\">\r\n              <stop offset=\"0%\" stopColor=\"#8B5CF6\" stopOpacity=\"0.3\" />\r\n              <stop offset=\"100%\" stopColor=\"#3B0764\" stopOpacity=\"1\" />\r\n            </radialGradient>\r\n            <filter id=\"glow\">\r\n              <feGaussianBlur stdDeviation=\"3.5\" result=\"coloredBlur\" />\r\n              <feMerge>\r\n                <feMergeNode in=\"coloredBlur\" />\r\n                <feMergeNode in=\"SourceGraphic\" />\r\n              </feMerge>\r\n            </filter>\r\n          </defs>\r\n\r\n          {/* Cosmic background */}\r\n          <motion.rect\r\n            width=\"100%\"\r\n            height=\"100%\"\r\n            fill=\"url(#cosmos)\"\r\n            initial={{ opacity: 0 }}\r\n            animate={{ opacity: 1 }}\r\n            transition={{ duration: 2 }}\r\n          />\r\n\r\n          {/* Stars */}\r\n          {[...Array(200)].map((_, i) => (\r\n            <motion.circle\r\n              key={i}\r\n              cx={Math.random() * 1000}\r\n              cy={Math.random() * 1000}\r\n              r={Math.random() * 2 + 0.5}\r\n              fill=\"#FFFFFF\"\r\n              variants={starVariants}\r\n              initial=\"hidden\"\r\n              animate=\"visible\"\r\n              style={{ filter: \"url(#glow)\" }}\r\n            />\r\n          ))}\r\n\r\n          {/* Central planet */}\r\n          <motion.g\r\n            variants={planetVariants}\r\n            initial=\"hidden\"\r\n            animate=\"visible\"\r\n          >\r\n            <circle cx=\"500\" cy=\"500\" r=\"150\" fill=\"#60A5FA\" />\r\n            <ellipse\r\n              cx=\"500\"\r\n              cy=\"500\"\r\n              rx=\"150\"\r\n              ry=\"30\"\r\n              fill=\"#1E3A8A\"\r\n              opacity=\"0.3\"\r\n            />\r\n            <path\r\n              d=\"M350 500 Q 500 400, 650 500 Q 500 600, 350 500\"\r\n              fill=\"#2563EB\"\r\n              opacity=\"0.5\"\r\n            />\r\n          </motion.g>\r\n\r\n          {/* Orbiting moons */}\r\n          <motion.g\r\n            animate={{\r\n              rotate: 360,\r\n            }}\r\n            transition={{\r\n              duration: 20,\r\n              repeat: Infinity,\r\n              ease: \"linear\",\r\n            }}\r\n          >\r\n            <circle cx=\"800\" cy=\"500\" r=\"30\" fill=\"#F472B6\" />\r\n            <circle cx=\"500\" cy=\"200\" r=\"20\" fill=\"#34D399\" />\r\n            <circle cx=\"300\" cy=\"700\" r=\"25\" fill=\"#FBBF24\" />\r\n          </motion.g>\r\n\r\n          {/* Interactive comet */}\r\n          <motion.path\r\n            d={`M${cursorPosition.x},${cursorPosition.y} q-50,10 -100,0`}\r\n            stroke=\"#F9FAFB\"\r\n            strokeWidth=\"3\"\r\n            fill=\"none\"\r\n            initial={{ pathLength: 0, opacity: 0 }}\r\n            animate={{ pathLength: 1, opacity: 1 }}\r\n            transition={{ duration: 0.5 }}\r\n            style={{ filter: \"url(#glow)\" }}\r\n          />\r\n        </svg>\r\n\r\n        {/* Content */}\r\n        <div className=\"absolute inset-0 flex flex-col items-center justify-center text-white\">\r\n          <motion.h1\r\n            className=\"text-6xl font-bold mb-4\"\r\n            variants={textVariants}\r\n            initial=\"hidden\"\r\n            animate=\"visible\"\r\n          >\r\n            Welcome to the Cosmos\r\n          </motion.h1>\r\n          <motion.p\r\n            className=\"text-xl mb-8\"\r\n            variants={textVariants}\r\n            initial=\"hidden\"\r\n            animate=\"visible\"\r\n          >\r\n            Explore the infinite possibilities of web development\r\n          </motion.p>\r\n          <motion.button\r\n            className=\"px-6 py-3 bg-indigo-600 text-white rounded-full font-semibold hover:bg-indigo-700 transition-colors\"\r\n            whileHover={{ scale: 1.05 }}\r\n            whileTap={{ scale: 0.95 }}\r\n          >\r\n            Start Your Journey\r\n          </motion.button>\r\n        </div>\r\n      </motion.div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CosmicHomePage;\r\n",
      "type": "registry:block"
    },
    {
      "path": "./components\\theme-provider.tsx",
      "content": "\"use client\";\r\n\r\nimport * as React from \"react\";\r\nimport { ThemeProvider as NextThemesProvider } from \"next-themes\";\r\nimport { type ThemeProviderProps } from \"next-themes/dist/types\";\r\n\r\nexport function ThemeProvider({ children, ...props }: ThemeProviderProps) {\r\n  return <NextThemesProvider {...props}>{children}</NextThemesProvider>;\r\n}\r\n",
      "type": "registry:block"
    },
    {
      "path": "./components\\ui\\alert.tsx",
      "content": "import * as React from \"react\"\r\nimport { cva, type VariantProps } from \"class-variance-authority\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst alertVariants = cva(\r\n  \"relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: \"bg-background text-foreground\",\r\n        destructive:\r\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: \"default\",\r\n    },\r\n  }\r\n)\r\n\r\nconst Alert = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\r\n>(({ className, variant, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    role=\"alert\"\r\n    className={cn(alertVariants({ variant }), className)}\r\n    {...props}\r\n  />\r\n))\r\nAlert.displayName = \"Alert\"\r\n\r\nconst AlertTitle = React.forwardRef<\r\n  HTMLParagraphElement,\r\n  React.HTMLAttributes<HTMLHeadingElement>\r\n>(({ className, ...props }, ref) => (\r\n  <h5\r\n    ref={ref}\r\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\r\n    {...props}\r\n  />\r\n))\r\nAlertTitle.displayName = \"AlertTitle\"\r\n\r\nconst AlertDescription = React.forwardRef<\r\n  HTMLParagraphElement,\r\n  React.HTMLAttributes<HTMLParagraphElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\r\n    {...props}\r\n  />\r\n))\r\nAlertDescription.displayName = \"AlertDescription\"\r\n\r\nexport { Alert, AlertTitle, AlertDescription }\r\n",
      "type": "registry:block"
    },
    {
      "path": "./components\\ui\\avatar.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n",
      "type": "registry:block"
    },
    {
      "path": "./components\\ui\\button.tsx",
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n",
      "type": "registry:block"
    },
    {
      "path": "./components\\ui\\card.tsx",
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-xl border bg-card text-card-foreground shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n",
      "type": "registry:block"
    },
    {
      "path": "./components\\ui\\input.tsx",
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n",
      "type": "registry:block"
    },
    {
      "path": "./components\\ui\\sheet.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { Cross2Icon } from \"@radix-ui/react-icons\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <Cross2Icon className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n      {children}\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n",
      "type": "registry:block"
    },
    {
      "path": "./components\\ui\\skeleton.tsx",
      "content": "import { cn } from \"@/lib/utils\"\r\n\r\nfunction Skeleton({\r\n  className,\r\n  ...props\r\n}: React.HTMLAttributes<HTMLDivElement>) {\r\n  return (\r\n    <div\r\n      className={cn(\"animate-pulse rounded-md bg-primary/10\", className)}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nexport { Skeleton }\r\n",
      "type": "registry:block"
    },
    {
      "path": "./components\\ui\\sonner.tsx",
      "content": "\"use client\"\r\n\r\nimport { useTheme } from \"next-themes\"\r\nimport { Toaster as Sonner } from \"sonner\"\r\n\r\ntype ToasterProps = React.ComponentProps<typeof Sonner>\r\n\r\nconst Toaster = ({ ...props }: ToasterProps) => {\r\n  const { theme = \"system\" } = useTheme()\r\n\r\n  return (\r\n    <Sonner\r\n      theme={theme as ToasterProps[\"theme\"]}\r\n      className=\"toaster group\"\r\n      toastOptions={{\r\n        classNames: {\r\n          toast:\r\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\r\n          description: \"group-[.toast]:text-muted-foreground\",\r\n          actionButton:\r\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\r\n          cancelButton:\r\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\r\n        },\r\n      }}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n\r\nexport { Toaster }\r\n",
      "type": "registry:block"
    },
    {
      "path": "./components\\ui\\textarea.tsx",
      "content": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n",
      "type": "registry:block"
    },
    {
      "path": "./components\\ui\\toast.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { Cross2Icon } from \"@radix-ui/react-icons\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-2 overflow-hidden rounded-md border p-4 pr-6 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium transition-colors hover:bg-secondary focus:outline-none focus:ring-1 focus:ring-ring disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-1 top-1 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-1 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <Cross2Icon className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold [&+div]:text-xs\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n",
      "type": "registry:block"
    },
    {
      "path": "./components\\ui\\toaster.tsx",
      "content": "\"use client\"\n\nimport { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n",
      "type": "registry:block"
    },
    {
      "path": "./docker-compose.yml",
      "content": "version: \"3\"\r\nservices:\r\n  web:\r\n    image: prathameshchougale17/next-custom-template:0.0\r\n    ports:\r\n      - \"3000:3000\"\r\n    environment:\r\n      NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY}\r\n      CLERK_SECRET_KEY: ${CLERK_SECRET_KEY}\r\n      NEXT_PUBLIC_CLERK_SIGN_IN_URL: /sign-in\r\n      NEXT_PUBLIC_CLERK_SIGN_UP_URL: /sign-up\r\n      MONGODB_URI: ${MONGODB_URI}\r\n      EMAIL_USER: ${EMAIL_USER}\r\n      EMAIL_PASS: ${EMAIL_PASS}\r\n",
      "type": "registry:example",
      "target": "~/docker-compose.yml"
    },
    {
      "path": "./Dockerfile",
      "content": "# FROM node:alpine3.20\r\n\r\n# # Create app directory\r\n\r\n# WORKDIR /app\r\n\r\n# COPY . .\r\n\r\n# RUN npm install\r\n\r\n# RUN npm run build\r\n\r\n# # EXPOSE 3000\r\n\r\n# CMD [\"npm\", \"start\"]\r\n\r\nFROM oven/bun:alpine AS base\r\n\r\n# Stage 1: Install dependencies\r\nFROM base AS deps\r\nWORKDIR /app\r\nCOPY package.json bun.lockb ./\r\nRUN bun install --frozen-lockfile\r\n\r\n# Stage 2: Build the application\r\nFROM base AS builder\r\nWORKDIR /app\r\nCOPY --from=deps /app/node_modules ./node_modules\r\nCOPY . .\r\nRUN bun run build\r\n\r\n# Stage 3: Production image\r\nFROM base AS runner\r\nWORKDIR /app\r\nENV NODE_ENV=production\r\nCOPY --from=builder /app/public ./public\r\nCOPY --from=builder /app/.next/standalone ./\r\nCOPY --from=builder /app/.next/static ./.next/static\r\n\r\nEXPOSE 3000\r\nCMD [\"bun\", \"run\", \"server.js\"]",
      "type": "registry:example",
      "target": "~/Dockerfile"
    },
    {
      "path": "./hooks\\use-toast.ts",
      "content": "\"use client\"\n\n// Inspired by react-hot-toast library\nimport * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n",
      "type": "registry:hook"
    },
    {
      "path": "./lib\\utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n",
      "type": "registry:lib"
    },
    {
      "path": "./middleware.ts",
      "content": "/*\r\nimport { clerkMiddleware, createRouteMatcher } from '@clerk/nextjs/server';\r\nconst isProtectedRoute = createRouteMatcher([\r\n    '/ai(.*)',\r\n    '/contact(.*)',\r\n    '/games(.*)',\r\n  ]);\r\n  \r\n  export default clerkMiddleware((auth, req) => {\r\n    if (!auth().userId && isProtectedRoute(req)) {\r\n      // Add custom logic to run before redirecting\r\n      return auth().redirectToSignIn();\r\n    }\r\n  });\r\n\r\n*/\r\nimport { clerkMiddleware, createRouteMatcher } from '@clerk/nextjs/server'\r\n\r\nconst isPublicRoute = createRouteMatcher([\r\n  '/sign-in(.*)', \r\n  '/sign-up(.*)',\r\n  '/'\r\n])\r\n\r\nexport default clerkMiddleware((auth, request) => {\r\n  if (!isPublicRoute(request)) {\r\n    auth().protect()\r\n  }\r\n})\r\nexport const config = {\r\n  matcher: [\r\n    // Skip Next.js internals and all static files, unless found in search params\r\n    '/((?!_next|[^?]*\\\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)',\r\n    // Always run for API routes\r\n    '/(api|trpc)(.*)',\r\n  ],\r\n}",
      "type": "registry:example",
      "target": "~/middleware.ts"
    },
    {
      "path": "./next.config.mjs",
      "content": "/** @type {import('next').NextConfig} */\r\nconst nextConfig = {\r\n  output: 'standalone',\r\n  images: {\r\n      remotePatterns:[\r\n        {\r\n          protocol: 'https',\r\n          hostname:  \"api.microlink.io\"\r\n        }\r\n      ]\r\n    },\r\n    async headers() {\r\n      return [\r\n        {\r\n          source: '/:path*{/}?',\r\n          headers: [\r\n            {\r\n              key: 'X-Accel-Buffering',\r\n              value: 'no',\r\n            },\r\n          ],\r\n        },\r\n      ];\r\n    },\r\n};\r\n\r\nexport default nextConfig;\r\n",
      "type": "registry:example",
      "target": "~/next.config.mjs"
    },
    {
      "path": "./postcss.config.mjs",
      "content": "/** @type {import('postcss-load-config').Config} */\nconst config = {\n  plugins: {\n    tailwindcss: {},\n  },\n};\n\nexport default config;\n",
      "type": "registry:example",
      "target": "~/postcss.config.mjs"
    },
    {
      "path": "./tsconfig.json",
      "content": "{\n  \"compilerOptions\": {\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"allowJs\": true,\n    \"skipLibCheck\": true,\n    \"strict\": true,\n    \"noEmit\": true,\n    \"esModuleInterop\": true,\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"bundler\",\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"jsx\": \"preserve\",\n    \"incremental\": true,\n    \"plugins\": [\n      {\n        \"name\": \"next\"\n      }\n    ],\n    \"paths\": {\n      \"@/*\": [\"./*\"]\n    }\n  },\n  \"include\": [\"next-env.d.ts\", \"**/*.ts\", \"**/*.tsx\", \".next/types/**/*.ts\"],\n  \"exclude\": [\"node_modules\"]\n}\n",
      "type": "registry:example",
      "target": "~/tsconfig.json"
    }
  ],
  "tailwind": {},
  "cssVars": {},
  "meta": {}
}
